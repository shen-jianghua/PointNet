  loadModel.cpp
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\c10\util\Exception.h(28,45): warning C4275: 非 dll 接口 class“std::exception”用作 dll 接口 class“c10::Error”的基
C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.29.30133\include\vcruntime_exception.h(48): message : 参见“std::exception”的声明
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\c10\util\Exception.h(28): message : 参见“c10::Error”的声明
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\c10\util\Exception.h(30,15): warning C4251: “c10::Error::msg_”: class“std::basic_string<char,std::char_traits<char>,std::allocator<char>>”需要有 dll 接口由 class“c10::Error”的客户端使用
C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.29.30133\include\xstring(4871): message : 参见“std::basic_string<char,std::char_traits<char>,std::allocator<char>>”的声明
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\c10\util\Exception.h(35,28): warning C4251: “c10::Error::context_”: class“std::vector<std::string,std::allocator<std::string>>”需要有 dll 接口由 class“c10::Error”的客户端使用
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\c10\util\Exception.h(35): message : 参见“std::vector<std::string,std::allocator<std::string>>”的声明
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\c10\util\Exception.h(40,15): warning C4251: “c10::Error::backtrace_”: class“std::basic_string<char,std::char_traits<char>,std::allocator<char>>”需要有 dll 接口由 class“c10::Error”的客户端使用
C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.29.30133\include\xstring(4871): message : 参见“std::basic_string<char,std::char_traits<char>,std::allocator<char>>”的声明
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\c10\util\Exception.h(47,15): warning C4251: “c10::Error::what_”: class“std::basic_string<char,std::char_traits<char>,std::allocator<char>>”需要有 dll 接口由 class“c10::Error”的客户端使用
C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.29.30133\include\xstring(4871): message : 参见“std::basic_string<char,std::char_traits<char>,std::allocator<char>>”的声明
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\c10\util\Exception.h(48,15): warning C4251: “c10::Error::what_without_backtrace_”: class“std::basic_string<char,std::char_traits<char>,std::allocator<char>>”需要有 dll 接口由 class“c10::Error”的客户端使用
C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.29.30133\include\xstring(4871): message : 参见“std::basic_string<char,std::char_traits<char>,std::allocator<char>>”的声明
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\c10\util\ThreadLocalDebugInfo.h(56,34): warning C4251: “c10::ThreadLocalDebugInfo::info_”: class“std::shared_ptr<c10::DebugInfoBase>”需要有 dll 接口由 class“c10::ThreadLocalDebugInfo”的客户端使用
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\c10\util\ThreadLocalDebugInfo.h(47): message : 参见“std::shared_ptr<c10::DebugInfoBase>”的声明
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\c10\util\ThreadLocalDebugInfo.h(58,41): warning C4251: “c10::ThreadLocalDebugInfo::parent_info_”: class“std::shared_ptr<c10::ThreadLocalDebugInfo>”需要有 dll 接口由 class“c10::ThreadLocalDebugInfo”的客户端使用
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\c10\util\ThreadLocalDebugInfo.h(40): message : 参见“std::shared_ptr<c10::ThreadLocalDebugInfo>”的声明
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\c10\util\ThreadLocalDebugInfo.h(82,41): warning C4251: “c10::DebugInfoGuard::prev_info_”: class“std::shared_ptr<c10::ThreadLocalDebugInfo>”需要有 dll 接口由 class“c10::DebugInfoGuard”的客户端使用
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\c10\util\ThreadLocalDebugInfo.h(40): message : 参见“std::shared_ptr<c10::ThreadLocalDebugInfo>”的声明
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\c10\core\Allocator.h(22,30): warning C4251: “c10::DataPtr::ptr_”: class“c10::detail::UniqueVoidPtr”需要有 dll 接口由 class“c10::DataPtr”的客户端使用
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\c10\util\UniqueVoidPtr.h(38): message : 参见“c10::detail::UniqueVoidPtr”的声明
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\c10\core\Allocator.h(186,53): warning C4251: “c10::InefficientStdFunctionContext::ptr_”: class“std::unique_ptr<void,std::function<void (void *)>>”需要有 dll 接口由 struct“c10::InefficientStdFunctionContext”的客户端使用
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\c10\core\Allocator.h(186): message : 参见“std::unique_ptr<void,std::function<void (void *)>>”的声明
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\c10\util\BFloat16-inl.h(183,36): warning C4244: “参数”: 从“int”转换到“float”，可能丢失数据
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\c10\util\BFloat16-inl.h(186,36): warning C4244: “参数”: 从“int”转换到“float”，可能丢失数据
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\c10\util\BFloat16-inl.h(189,36): warning C4244: “参数”: 从“int”转换到“float”，可能丢失数据
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\c10\util\BFloat16-inl.h(192,36): warning C4244: “参数”: 从“int”转换到“float”，可能丢失数据
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\c10\util\BFloat16-inl.h(196,32): warning C4244: “参数”: 从“int”转换到“float”，可能丢失数据
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\c10\util\BFloat16-inl.h(199,32): warning C4244: “参数”: 从“int”转换到“float”，可能丢失数据
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\c10\util\BFloat16-inl.h(202,32): warning C4244: “参数”: 从“int”转换到“float”，可能丢失数据
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\c10\util\BFloat16-inl.h(205,32): warning C4244: “参数”: 从“int”转换到“float”，可能丢失数据
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\c10\util\BFloat16-inl.h(211,36): warning C4244: “参数”: 从“int64_t”转换到“float”，可能丢失数据
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\c10\util\BFloat16-inl.h(214,36): warning C4244: “参数”: 从“int64_t”转换到“float”，可能丢失数据
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\c10\util\BFloat16-inl.h(217,36): warning C4244: “参数”: 从“int64_t”转换到“float”，可能丢失数据
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\c10\util\BFloat16-inl.h(220,36): warning C4244: “参数”: 从“int64_t”转换到“float”，可能丢失数据
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\c10\util\BFloat16-inl.h(224,32): warning C4244: “参数”: 从“int64_t”转换到“float”，可能丢失数据
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\c10\util\BFloat16-inl.h(227,32): warning C4244: “参数”: 从“int64_t”转换到“float”，可能丢失数据
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\c10\util\BFloat16-inl.h(230,32): warning C4244: “参数”: 从“int64_t”转换到“float”，可能丢失数据
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\c10\util\BFloat16-inl.h(233,32): warning C4244: “参数”: 从“int64_t”转换到“float”，可能丢失数据
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\c10\util\Half-inl.h(187,32): warning C4244: “参数”: 从“int”转换到“float”，可能丢失数据
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\c10\util\Half-inl.h(190,32): warning C4244: “参数”: 从“int”转换到“float”，可能丢失数据
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\c10\util\Half-inl.h(193,32): warning C4244: “参数”: 从“int”转换到“float”，可能丢失数据
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\c10\util\Half-inl.h(196,32): warning C4244: “参数”: 从“int”转换到“float”，可能丢失数据
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\c10\util\Half-inl.h(200,28): warning C4244: “参数”: 从“int”转换到“float”，可能丢失数据
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\c10\util\Half-inl.h(203,28): warning C4244: “参数”: 从“int”转换到“float”，可能丢失数据
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\c10\util\Half-inl.h(206,28): warning C4244: “参数”: 从“int”转换到“float”，可能丢失数据
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\c10\util\Half-inl.h(209,28): warning C4244: “参数”: 从“int”转换到“float”，可能丢失数据
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\c10\util\Half-inl.h(215,32): warning C4244: “参数”: 从“int64_t”转换到“float”，可能丢失数据
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\c10\util\Half-inl.h(218,32): warning C4244: “参数”: 从“int64_t”转换到“float”，可能丢失数据
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\c10\util\Half-inl.h(221,32): warning C4244: “参数”: 从“int64_t”转换到“float”，可能丢失数据
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\c10\util\Half-inl.h(224,32): warning C4244: “参数”: 从“int64_t”转换到“float”，可能丢失数据
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\c10\util\Half-inl.h(228,28): warning C4244: “参数”: 从“int64_t”转换到“float”，可能丢失数据
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\c10\util\Half-inl.h(231,28): warning C4244: “参数”: 从“int64_t”转换到“float”，可能丢失数据
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\c10\util\Half-inl.h(234,28): warning C4244: “参数”: 从“int64_t”转换到“float”，可能丢失数据
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\c10\util\Half-inl.h(237,28): warning C4244: “参数”: 从“int64_t”转换到“float”，可能丢失数据
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\c10\core\Scalar.h(188,5): warning C4251: “c10::Scalar::v”: union“c10::Scalar::v_t”需要有 dll 接口由 class“c10::Scalar”的客户端使用
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\c10\core\Scalar.h(183): message : 参见“c10::Scalar::v_t”的声明
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\c10\util\typeid.h(64,67): warning C4251: “c10::IdWrapper<caffe2::TypeIdentifier,c10::util::type_index>::id_”: struct“c10::util::type_index”需要有 dll 接口由 class“c10::IdWrapper<caffe2::TypeIdentifier,c10::util::type_index>”的客户端使用
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\c10\util\TypeIndex.h(57): message : 参见“c10::util::type_index”的声明
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\c10\util\typeid.h(510,32): warning C4251: “caffe2::TypeMeta::nextTypeIndex”: struct“std::atomic<unsigned short>”需要有 dll 接口由 class“caffe2::TypeMeta”的客户端使用
C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.29.30133\include\atomic(2841): message : 参见“std::atomic<unsigned short>”的声明
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\c10\util\intrusive_ptr.h(80,31): warning C4251: “c10::intrusive_ptr_target::refcount_”: struct“std::atomic<unsigned __int64>”需要有 dll 接口由 class“c10::intrusive_ptr_target”的客户端使用
C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.29.30133\include\atomic(2847): message : 参见“std::atomic<unsigned __int64>”的声明
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\c10\util\intrusive_ptr.h(81,31): warning C4251: “c10::intrusive_ptr_target::weakcount_”: struct“std::atomic<unsigned __int64>”需要有 dll 接口由 class“c10::intrusive_ptr_target”的客户端使用
C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.29.30133\include\atomic(2847): message : 参见“std::atomic<unsigned __int64>”的声明
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\c10\core\Storage.h(166,35): warning C4251: “c10::Storage::storage_impl_”: class“c10::intrusive_ptr<c10::StorageImpl,c10::detail::intrusive_target_default_null_type<TTarget>>”需要有 dll 接口由 struct“c10::Storage”的客户端使用
          with
          [
              TTarget=c10::StorageImpl
          ]
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\c10\core\Storage.h(12): message : 参见“c10::intrusive_ptr<c10::StorageImpl,c10::detail::intrusive_target_default_null_type<TTarget>>”的声明
          with
          [
              TTarget=c10::StorageImpl
          ]
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\c10\core\impl\LocalDispatchKeySet.h(61,18): warning C4251: “c10::impl::LocalDispatchKeySet::included_”: class“c10::DispatchKeySet”需要有 dll 接口由 struct“c10::impl::LocalDispatchKeySet”的客户端使用
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\c10\core\DispatchKeySet.h(35): message : 参见“c10::DispatchKeySet”的声明
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\c10\core\impl\LocalDispatchKeySet.h(62,18): warning C4251: “c10::impl::LocalDispatchKeySet::excluded_”: class“c10::DispatchKeySet”需要有 dll 接口由 struct“c10::impl::LocalDispatchKeySet”的客户端使用
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\c10\core\DispatchKeySet.h(35): message : 参见“c10::DispatchKeySet”的声明
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\c10\core\impl\LocalDispatchKeySet.h(99,18): warning C4251: “c10::impl::IncludeDispatchKeyGuard::include_”: class“c10::DispatchKeySet”需要有 dll 接口由 class“c10::impl::IncludeDispatchKeyGuard”的客户端使用
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\c10\core\DispatchKeySet.h(35): message : 参见“c10::DispatchKeySet”的声明
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\c10\core\impl\LocalDispatchKeySet.h(117,18): warning C4251: “c10::impl::ExcludeDispatchKeyGuard::exclude_”: class“c10::DispatchKeySet”需要有 dll 接口由 class“c10::impl::ExcludeDispatchKeyGuard”的客户端使用
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\c10\core\DispatchKeySet.h(35): message : 参见“c10::DispatchKeySet”的声明
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\c10\util\logging_is_not_google_glog.h(43,21): warning C4251: “c10::MessageLogger::stream_”: class“std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>”需要有 dll 接口由 class“c10::MessageLogger”的客户端使用
C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.29.30133\include\iosfwd(226): message : 参见“std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>”的声明
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\c10\core\TensorImpl.h(429,38): warning C4251: “c10::VariableVersion::version_counter_”: class“c10::intrusive_ptr<c10::VariableVersion::VersionCounter,c10::detail::intrusive_target_default_null_type<TTarget>>”需要有 dll 接口由 struct“c10::VariableVersion”的客户端使用
          with
          [
              TTarget=c10::VariableVersion::VersionCounter
          ]
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\c10\core\TensorImpl.h(429): message : 参见“c10::intrusive_ptr<c10::VariableVersion::VersionCounter,c10::detail::intrusive_target_default_null_type<TTarget>>”的声明
          with
          [
              TTarget=c10::VariableVersion::VersionCounter
          ]
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\c10\core\TensorImpl.h(2391,47): warning C4251: “c10::TensorImpl::autograd_meta_”: class“std::unique_ptr<c10::AutogradMetaInterface,std::default_delete<c10::AutogradMetaInterface>>”需要有 dll 接口由 struct“c10::TensorImpl”的客户端使用
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\c10\core\TensorImpl.h(178): message : 参见“std::unique_ptr<c10::AutogradMetaInterface,std::default_delete<c10::AutogradMetaInterface>>”的声明
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\c10\core\TensorImpl.h(2394,50): warning C4251: “c10::TensorImpl::named_tensor_meta_”: class“std::unique_ptr<c10::NamedTensorMetaInterface,std::default_delete<c10::NamedTensorMetaInterface>>”需要有 dll 接口由 struct“c10::TensorImpl”的客户端使用
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\c10\core\TensorImpl.h(348): message : 参见“std::unique_ptr<c10::NamedTensorMetaInterface,std::default_delete<c10::NamedTensorMetaInterface>>”的声明
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\c10\core\TensorImpl.h(2420,37): warning C4251: “c10::TensorImpl::pyobj_interpreter_”: struct“std::atomic<c10::impl::PyInterpreter *>”需要有 dll 接口由 struct“c10::TensorImpl”的客户端使用
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\c10\core\TensorImpl.h(2420): message : 参见“std::atomic<c10::impl::PyInterpreter *>”的声明
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\c10\core\TensorImpl.h(2460,30): warning C4251: “c10::TensorImpl::device_opt_”: class“c10::optional<c10::Device>”需要有 dll 接口由 struct“c10::TensorImpl”的客户端使用
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\c10\core\TensorOptions.h(25): message : 参见“c10::optional<c10::Device>”的声明
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\c10\core\TensorImpl.h(2552,18): warning C4251: “c10::TensorImpl::key_set_”: class“c10::DispatchKeySet”需要有 dll 接口由 struct“c10::TensorImpl”的客户端使用
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\c10\core\DispatchKeySet.h(35): message : 参见“c10::DispatchKeySet”的声明
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\ATen\core\DeprecatedTypePropertiesRegistry.h(24,45): warning C4251: “at::DeprecatedTypePropertiesRegistry::registry”: class“std::unique_ptr<at::DeprecatedTypeProperties,std::default_delete<at::DeprecatedTypeProperties>>”需要有 dll 接口由 class“at::DeprecatedTypePropertiesRegistry”的客户端使用
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\ATen\core\DeprecatedTypePropertiesRegistry.h(24): message : 参见“std::unique_ptr<at::DeprecatedTypeProperties,std::default_delete<at::DeprecatedTypeProperties>>”的声明
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\c10\core\GeneratorImpl.h(82,14): warning C4251: “c10::GeneratorImpl::mutex_”: class“std::mutex”需要有 dll 接口由 struct“c10::GeneratorImpl”的客户端使用
C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.29.30133\include\mutex(86): message : 参见“std::mutex”的声明
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\c10\core\GeneratorImpl.h(98,18): warning C4251: “c10::GeneratorImpl::key_set_”: class“c10::DispatchKeySet”需要有 dll 接口由 struct“c10::GeneratorImpl”的客户端使用
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\c10\core\DispatchKeySet.h(35): message : 参见“c10::DispatchKeySet”的声明
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\ATen\core\Generator.h(133,42): warning C4251: “at::Generator::impl_”: class“c10::intrusive_ptr<c10::GeneratorImpl,c10::detail::intrusive_target_default_null_type<TTarget>>”需要有 dll 接口由 struct“at::Generator”的客户端使用
          with
          [
              TTarget=c10::GeneratorImpl
          ]
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\c10\core\GeneratorImpl.h(71): message : 参见“c10::intrusive_ptr<c10::GeneratorImpl,c10::detail::intrusive_target_default_null_type<TTarget>>”的声明
          with
          [
              TTarget=c10::GeneratorImpl
          ]
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\ATen\core\NamedTensor.h(69,24): warning C4251: “at::NamedTensorMeta::names_”: class“std::vector<at::Dimname,std::allocator<at::Dimname>>”需要有 dll 接口由 struct“at::NamedTensorMeta”的客户端使用
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\ATen\core\NamedTensor.h(35): message : 参见“std::vector<at::Dimname,std::allocator<at::Dimname>>”的声明
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\ATen\core\TensorBase.h(752,55): warning C4251: “at::TensorBase::impl_”: class“c10::intrusive_ptr<c10::TensorImpl,c10::UndefinedTensorImpl>”需要有 dll 接口由 class“at::TensorBase”的客户端使用
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\ATen\core\TensorBase.h(93): message : 参见“c10::intrusive_ptr<c10::TensorImpl,c10::UndefinedTensorImpl>”的声明
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\c10\util\Optional.h(184,1): warning C4624: “c10::constexpr_storage_t<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=at::TensorBase
          ]
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\c10\util\Optional.h(383): message : 查看对正在编译的 类 模板 实例化“c10::constexpr_storage_t<T>”的引用
          with
          [
              T=at::TensorBase
          ]
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\c10\util\Optional.h(526): message : 查看对正在编译的 类 模板 实例化“c10::trivially_copyable_optimization_optional_base<T>”的引用
          with
          [
              T=at::TensorBase
          ]
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\c10\util\Optional.h(526): message : 查看对正在编译的 别名 模板 实例化“c10::OptionalBase<at::TensorBase>”的引用
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\ATen\core\TensorBase.h(899): message : 查看对正在编译的 类 模板 实例化“c10::optional<at::TensorBase>”的引用
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\c10\util\Optional.h(418,1): warning C4624: “c10::trivially_copyable_optimization_optional_base<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=at::TensorBase
          ]
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\c10\util\Optional.h(184,1): warning C4624: “c10::constexpr_storage_t<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=at::Tensor
          ]
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\c10\util\Optional.h(383): message : 查看对正在编译的 类 模板 实例化“c10::constexpr_storage_t<T>”的引用
          with
          [
              T=at::Tensor
          ]
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\c10\util\Optional.h(526): message : 查看对正在编译的 类 模板 实例化“c10::trivially_copyable_optimization_optional_base<T>”的引用
          with
          [
              T=at::Tensor
          ]
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\c10\util\Optional.h(526): message : 查看对正在编译的 别名 模板 实例化“c10::OptionalBase<at::Tensor>”的引用
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\ATen\core\TensorBody.h(444): message : 查看对正在编译的 类 模板 实例化“c10::optional<at::Tensor>”的引用
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\c10\util\Optional.h(418,1): warning C4624: “c10::trivially_copyable_optimization_optional_base<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=at::Tensor
          ]
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\c10\util\Optional.h(184,1): warning C4624: “c10::constexpr_storage_t<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=at::Generator
          ]
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\c10\util\Optional.h(383): message : 查看对正在编译的 类 模板 实例化“c10::constexpr_storage_t<T>”的引用
          with
          [
              T=at::Generator
          ]
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\c10\util\Optional.h(526): message : 查看对正在编译的 类 模板 实例化“c10::trivially_copyable_optimization_optional_base<T>”的引用
          with
          [
              T=at::Generator
          ]
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\c10\util\Optional.h(526): message : 查看对正在编译的 别名 模板 实例化“c10::OptionalBase<at::Generator>”的引用
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\ATen\core\TensorBody.h(518): message : 查看对正在编译的 类 模板 实例化“c10::optional<at::Generator>”的引用
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\c10\util\Optional.h(418,1): warning C4624: “c10::trivially_copyable_optimization_optional_base<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=at::Generator
          ]
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\ATen\CPUGeneratorImpl.h(34,15): warning C4251: “at::CPUGeneratorImpl::engine_”: class“at::mt19937_engine”需要有 dll 接口由 struct“at::CPUGeneratorImpl”的客户端使用
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\ATen\core\MT19937RNGEngine.h(108): message : 参见“at::mt19937_engine”的声明
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\ATen\CPUGeneratorImpl.h(35,24): warning C4251: “at::CPUGeneratorImpl::next_float_normal_sample_”: class“c10::optional<float>”需要有 dll 接口由 struct“at::CPUGeneratorImpl”的客户端使用
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\ATen\CPUGeneratorImpl.h(25): message : 参见“c10::optional<float>”的声明
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\ATen\CPUGeneratorImpl.h(36,25): warning C4251: “at::CPUGeneratorImpl::next_double_normal_sample_”: class“c10::optional<double>”需要有 dll 接口由 struct“at::CPUGeneratorImpl”的客户端使用
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\ATen\Operators.h(6052): message : 参见“c10::optional<double>”的声明
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\ATen\Context.h(233,18): warning C4251: “at::Context::thc_init”: struct“std::once_flag”需要有 dll 接口由 class“at::Context”的客户端使用
C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.29.30133\include\xcall_once.h(20): message : 参见“std::once_flag”的声明
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\ATen\Context.h(234,18): warning C4251: “at::Context::thh_init”: struct“std::once_flag”需要有 dll 接口由 class“at::Context”的客户端使用
C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.29.30133\include\xcall_once.h(20): message : 参见“std::once_flag”的声明
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\ATen\Context.h(248,30): warning C4251: “at::Context::quantized_engine”: class“c10::optional<c10::QEngine>”需要有 dll 接口由 class“at::Context”的客户端使用
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\ATen\Context.h(248): message : 参见“c10::optional<c10::QEngine>”的声明
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\ATen\Context.h(249,49): warning C4251: “at::Context::thc_state”: class“std::unique_ptr<THCState,void (__cdecl *)(THCState *)>”需要有 dll 接口由 class“at::Context”的客户端使用
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\ATen\detail\CUDAHooksInterface.h(76): message : 参见“std::unique_ptr<THCState,void (__cdecl *)(THCState *)>”的声明
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\ATen\Context.h(250,49): warning C4251: “at::Context::thh_state”: class“std::unique_ptr<THHState,void (__cdecl *)(THHState *)>”需要有 dll 接口由 class“at::Context”的客户端使用
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\ATen\detail\HIPHooksInterface.h(33): message : 参见“std::unique_ptr<THHState,void (__cdecl *)(THHState *)>”的声明
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\c10\util\Optional.h(184,1): warning C4624: “c10::constexpr_storage_t<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=c10::impl::InlineDeviceGuard<c10::impl::VirtualGuardImpl>
          ]
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\c10\util\Optional.h(383): message : 查看对正在编译的 类 模板 实例化“c10::constexpr_storage_t<T>”的引用
          with
          [
              T=c10::impl::InlineDeviceGuard<c10::impl::VirtualGuardImpl>
          ]
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\c10\util\Optional.h(526): message : 查看对正在编译的 类 模板 实例化“c10::trivially_copyable_optimization_optional_base<T>”的引用
          with
          [
              T=c10::impl::InlineDeviceGuard<c10::impl::VirtualGuardImpl>
          ]
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\c10\util\Optional.h(526): message : 查看对正在编译的 别名 模板 实例化“c10::OptionalBase<c10::impl::InlineDeviceGuard<c10::impl::VirtualGuardImpl>>”的引用
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\c10\core\impl\InlineDeviceGuard.h(427): message : 查看对正在编译的 类 模板 实例化“c10::optional<c10::impl::InlineDeviceGuard<c10::impl::VirtualGuardImpl>>”的引用
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\c10\core\DeviceGuard.h(178): message : 查看对正在编译的 类 模板 实例化“c10::impl::InlineOptionalDeviceGuard<c10::impl::VirtualGuardImpl>”的引用
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\c10\util\Optional.h(418,1): warning C4624: “c10::trivially_copyable_optimization_optional_base<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=c10::impl::InlineDeviceGuard<c10::impl::VirtualGuardImpl>
          ]
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\ATen\TensorGeometry.h(56,24): warning C4251: “at::TensorGeometry::sizes_”: class“std::vector<int64_t,std::allocator<int64_t>>”需要有 dll 接口由 struct“at::TensorGeometry”的客户端使用
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\c10\core\MemoryFormat.h(63): message : 参见“std::vector<int64_t,std::allocator<int64_t>>”的声明
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\ATen\TensorGeometry.h(57,24): warning C4251: “at::TensorGeometry::strides_”: class“std::vector<int64_t,std::allocator<int64_t>>”需要有 dll 接口由 struct“at::TensorGeometry”的客户端使用
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\c10\core\MemoryFormat.h(63): message : 参见“std::vector<int64_t,std::allocator<int64_t>>”的声明
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\ATen\Functions.h(12962,15): warning C4251: “at::TensorMaker::sizes_”: class“c10::ArrayRef<int64_t>”需要有 dll 接口由 class“at::TensorMaker”的客户端使用
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\c10\util\ArrayRef.h(303): message : 参见“c10::ArrayRef<int64_t>”的声明
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\ATen\Functions.h(12963,25): warning C4251: “at::TensorMaker::strides_”: class“c10::optional<c10::IntArrayRef>”需要有 dll 接口由 class“at::TensorMaker”的客户端使用
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\ATen\Operators.h(10298): message : 参见“c10::optional<c10::IntArrayRef>”的声明
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\ATen\Functions.h(12964,30): warning C4251: “at::TensorMaker::deleter_”: class“std::function<void (void *)>”需要有 dll 接口由 class“at::TensorMaker”的客户端使用
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\c10\core\Allocator.h(186): message : 参见“std::function<void (void *)>”的声明
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\ATen\Functions.h(12965,41): warning C4251: “at::TensorMaker::ctx_”: class“std::unique_ptr<void,c10::DeleterFnPtr>”需要有 dll 接口由 class“at::TensorMaker”的客户端使用
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\c10\util\UniqueVoidPtr.h(42): message : 参见“std::unique_ptr<void,c10::DeleterFnPtr>”的声明
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\ATen\Functions.h(12966,20): warning C4251: “at::TensorMaker::device_”: class“c10::optional<c10::Device>”需要有 dll 接口由 class“at::TensorMaker”的客户端使用
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\c10\core\TensorOptions.h(25): message : 参见“c10::optional<c10::Device>”的声明
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\ATen\TensorNames.h(40,21): warning C4251: “at::namedinference::TensorName::origin_”: class“c10::ArrayRef<at::Dimname>”需要有 dll 接口由 struct“at::namedinference::TensorName”的客户端使用
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\ATen\Operators.h(103): message : 参见“c10::ArrayRef<at::Dimname>”的声明
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\ATen\TensorNames.h(70,17): warning C4251: “at::namedinference::TensorNames::names_”: class“c10::SmallVector<at::namedinference::TensorName,10>”需要有 dll 接口由 struct“at::namedinference::TensorNames”的客户端使用
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\ATen\TensorNames.h(49): message : 参见“c10::SmallVector<at::namedinference::TensorName,10>”的声明
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\ATen\TensorIterator.h(84,16): warning C4251: “at::OperandInfo::stride_bytes”: class“c10::SmallVector<int64_t,6>”需要有 dll 接口由 struct“at::OperandInfo”的客户端使用
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\ATen\TensorIterator.h(70): message : 参见“c10::SmallVector<int64_t,6>”的声明
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\ATen\TensorIterator.h(89,27): warning C4251: “at::OperandInfo::tensor”: class“c10::MaybeOwned<at::Tensor>”需要有 dll 接口由 struct“at::OperandInfo”的客户端使用
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\ATen\core\TensorBody.h(130): message : 参见“c10::MaybeOwned<at::Tensor>”的声明
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\ATen\TensorIterator.h(93,27): warning C4251: “at::OperandInfo::original_tensor”: class“c10::MaybeOwned<at::Tensor>”需要有 dll 接口由 struct“at::OperandInfo”的客户端使用
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\ATen\core\TensorBody.h(130): message : 参见“c10::MaybeOwned<at::Tensor>”的声明
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\ATen\TensorIterator.h(406,13): warning C4251: “at::TensorIteratorBase::shape_”: class“c10::SmallVector<int64_t,5>”需要有 dll 接口由 struct“at::TensorIteratorBase”的客户端使用
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\c10\core\TensorImpl.h(1771): message : 参见“c10::SmallVector<int64_t,5>”的声明
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\ATen\TensorIterator.h(416,13): warning C4251: “at::TensorIteratorBase::perm_”: class“c10::SmallVector<int64_t,5>”需要有 dll 接口由 struct“at::TensorIteratorBase”的客户端使用
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\c10\core\TensorImpl.h(1771): message : 参见“c10::SmallVector<int64_t,5>”的声明
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\ATen\TensorIterator.h(429,13): warning C4251: “at::TensorIteratorBase::view_offsets_”: class“c10::SmallVector<int64_t,5>”需要有 dll 接口由 struct“at::TensorIteratorBase”的客户端使用
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\c10\core\TensorImpl.h(1771): message : 参见“c10::SmallVector<int64_t,5>”的声明
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\ATen\TensorIterator.h(432,14): warning C4251: “at::TensorIteratorBase::names_”: class“c10::SmallVector<at::Dimname,5>”需要有 dll 接口由 struct“at::TensorIteratorBase”的客户端使用
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\ATen\NamedTensorUtils.h(11): message : 参见“c10::SmallVector<at::Dimname,5>”的声明
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\ATen\TensorIterator.h(443,31): warning C4251: “at::TensorIteratorBase::operands_”: class“c10::SmallVector<at::OperandInfo,4>”需要有 dll 接口由 struct“at::TensorIteratorBase”的客户端使用
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\ATen\TensorIterator.h(443): message : 参见“c10::SmallVector<at::OperandInfo,4>”的声明
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\ATen\TensorIterator.h(166,20): warning C4267: “return”: 从“size_t”转换到“int”，可能丢失数据
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\ATen\TensorIterator.h(169,24): warning C4267: “return”: 从“size_t”转换到“int”，可能丢失数据
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\ATen\TensorIterator.h(663,43): warning C4251: “at::TensorIteratorConfig::tensors_”: class“c10::SmallVector<c10::MaybeOwned<at::Tensor>,4>”需要有 dll 接口由 class“at::TensorIteratorConfig”的客户端使用
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\ATen\TensorIterator.h(663): message : 参见“c10::SmallVector<c10::MaybeOwned<at::Tensor>,4>”的声明
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\c10\util\Optional.h(184,1): warning C4624: “c10::constexpr_storage_t<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=at::DimVector
          ]
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\c10\util\Optional.h(383): message : 查看对正在编译的 类 模板 实例化“c10::constexpr_storage_t<T>”的引用
          with
          [
              T=at::DimVector
          ]
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\c10\util\Optional.h(526): message : 查看对正在编译的 类 模板 实例化“c10::trivially_copyable_optimization_optional_base<T>”的引用
          with
          [
              T=at::DimVector
          ]
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\c10\util\Optional.h(526): message : 查看对正在编译的 别名 模板 实例化“c10::OptionalBase<at::DimVector>”的引用
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\ATen\TensorIterator.h(667): message : 查看对正在编译的 类 模板 实例化“c10::optional<at::DimVector>”的引用
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\c10\util\Optional.h(418,1): warning C4624: “c10::trivially_copyable_optimization_optional_base<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=at::DimVector
          ]
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\ATen\TensorIterator.h(667,28): warning C4251: “at::TensorIteratorConfig::static_shape_”: class“c10::optional<at::DimVector>”需要有 dll 接口由 class“at::TensorIteratorConfig”的客户端使用
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\ATen\TensorUtils.h(163): message : 参见“c10::optional<at::DimVector>”的声明
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\ATen\TensorIterator.h(668,48): warning C4251: “at::TensorIteratorConfig::static_dtype_and_device_”: class“c10::optional<std::pair<c10::ScalarType,c10::Device>>”需要有 dll 接口由 class“at::TensorIteratorConfig”的客户端使用
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\ATen\TensorIterator.h(668): message : 参见“c10::optional<std::pair<c10::ScalarType,c10::Device>>”的声明
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\ATen\TensorIterator.h(704,50): warning C4251: “at::SplitUntil32Bit::iterator::vec”: class“std::vector<std::unique_ptr<at::TensorIterator,std::default_delete<at::TensorIterator>>,std::allocator<std::unique_ptr<at::TensorIterator,std::default_delete<at::TensorIterator>>>>”需要有 dll 接口由 struct“at::SplitUntil32Bit::iterator”的客户端使用
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\ATen\TensorIterator.h(704): message : 参见“std::vector<std::unique_ptr<at::TensorIterator,std::default_delete<at::TensorIterator>>,std::allocator<std::unique_ptr<at::TensorIterator,std::default_delete<at::TensorIterator>>>>”的声明
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\ATen\core\jit_type_base.h(68,60): warning C4251: “std::enable_shared_from_this<c10::Type>::_Wptr”: class“std::weak_ptr<_Ty>”需要有 dll 接口由 class“std::enable_shared_from_this<c10::Type>”的客户端使用
          with
          [
              _Ty=c10::Type
          ]
C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.29.30133\include\memory(3052): message : 参见“std::weak_ptr<_Ty>”的声明
          with
          [
              _Ty=c10::Type
          ]
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\c10\util\Optional.h(184,1): warning C4624: “c10::constexpr_storage_t<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=std::string
          ]
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\c10\util\Optional.h(383): message : 查看对正在编译的 类 模板 实例化“c10::constexpr_storage_t<T>”的引用
          with
          [
              T=std::string
          ]
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\c10\util\Optional.h(526): message : 查看对正在编译的 类 模板 实例化“c10::trivially_copyable_optimization_optional_base<T>”的引用
          with
          [
              T=std::string
          ]
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\c10\util\Optional.h(526): message : 查看对正在编译的 别名 模板 实例化“c10::OptionalBase<std::string>”的引用
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\ATen\core\jit_type_base.h(108): message : 查看对正在编译的 类 模板 实例化“c10::optional<std::string>”的引用
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\c10\util\Optional.h(418,1): warning C4624: “c10::trivially_copyable_optimization_optional_base<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=std::string
          ]
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\ATen\core\ivalue.h(1015,11): warning C4251: “c10::IValue::payload”: union“c10::IValue::Payload”需要有 dll 接口由 struct“c10::IValue”的客户端使用
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\ATen\core\ivalue.h(982): message : 参见“c10::IValue::Payload”的声明
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\ATen\core\ivalue.h(1133,11): warning C4251: “c10::WeakIValue::payload”: union“c10::IValue::Payload::TriviallyCopyablePayload”需要有 dll 接口由 struct“c10::WeakIValue”的客户端使用
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\ATen\core\ivalue.h(988): message : 参见“c10::IValue::Payload::TriviallyCopyablePayload”的声明
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\ATen\core\ivalue.h(1146,48): warning C4251: “c10::StrongTypePtr::cu_”: class“std::shared_ptr<torch::jit::CompilationUnit>”需要有 dll 接口由 struct“c10::StrongTypePtr”的客户端使用
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\ATen\core\ivalue.h(1143): message : 参见“std::shared_ptr<torch::jit::CompilationUnit>”的声明
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\ATen\core\ivalue.h(1147,25): warning C4251: “c10::StrongTypePtr::type_”: class“std::shared_ptr<c10::Type>”需要有 dll 接口由 struct“c10::StrongTypePtr”的客户端使用
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\ATen\core\List.h(20): message : 参见“std::shared_ptr<c10::Type>”的声明
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\c10\util\Optional.h(184,1): warning C4624: “c10::constexpr_storage_t<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=c10::impl::InlineStreamGuard<c10::impl::VirtualGuardImpl>
          ]
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\c10\util\Optional.h(383): message : 查看对正在编译的 类 模板 实例化“c10::constexpr_storage_t<T>”的引用
          with
          [
              T=c10::impl::InlineStreamGuard<c10::impl::VirtualGuardImpl>
          ]
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\c10\util\Optional.h(526): message : 查看对正在编译的 类 模板 实例化“c10::trivially_copyable_optimization_optional_base<T>”的引用
          with
          [
              T=c10::impl::InlineStreamGuard<c10::impl::VirtualGuardImpl>
          ]
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\c10\util\Optional.h(526): message : 查看对正在编译的 别名 模板 实例化“c10::OptionalBase<c10::impl::InlineStreamGuard<c10::impl::VirtualGuardImpl>>”的引用
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\c10\core\impl\InlineStreamGuard.h(196): message : 查看对正在编译的 类 模板 实例化“c10::optional<c10::impl::InlineStreamGuard<c10::impl::VirtualGuardImpl>>”的引用
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\c10\core\StreamGuard.h(139): message : 查看对正在编译的 类 模板 实例化“c10::impl::InlineOptionalStreamGuard<c10::impl::VirtualGuardImpl>”的引用
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\c10\util\Optional.h(418,1): warning C4624: “c10::trivially_copyable_optimization_optional_base<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=c10::impl::InlineStreamGuard<c10::impl::VirtualGuardImpl>
          ]
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\c10\util\Optional.h(184,1): warning C4624: “c10::constexpr_storage_t<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=c10::impl::VirtualGuardImpl
          ]
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\c10\util\Optional.h(383): message : 查看对正在编译的 类 模板 实例化“c10::constexpr_storage_t<T>”的引用
          with
          [
              T=c10::impl::VirtualGuardImpl
          ]
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\c10\util\Optional.h(526): message : 查看对正在编译的 类 模板 实例化“c10::trivially_copyable_optimization_optional_base<T>”的引用
          with
          [
              T=c10::impl::VirtualGuardImpl
          ]
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\c10\util\Optional.h(526): message : 查看对正在编译的 别名 模板 实例化“c10::OptionalBase<c10::impl::VirtualGuardImpl>”的引用
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\c10\core\impl\InlineStreamGuard.h(231): message : 查看对正在编译的 类 模板 实例化“c10::optional<T>”的引用
          with
          [
              T=c10::impl::VirtualGuardImpl
          ]
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\c10\core\StreamGuard.h(162): message : 查看对正在编译的 类 模板 实例化“c10::impl::InlineMultiStreamGuard<c10::impl::VirtualGuardImpl>”的引用
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\c10\util\Optional.h(418,1): warning C4624: “c10::trivially_copyable_optimization_optional_base<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=c10::impl::VirtualGuardImpl
          ]
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\ATen\core\ivalue_inl.h(226,21): warning C4251: “c10::ivalue::ConstantString::str_”: class“std::basic_string<char,std::char_traits<char>,std::allocator<char>>”需要有 dll 接口由 struct“c10::ivalue::ConstantString”的客户端使用
C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.29.30133\include\xstring(4871): message : 参见“std::basic_string<char,std::char_traits<char>,std::allocator<char>>”的声明
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\ATen\core\ivalue_inl.h(254,23): warning C4251: “c10::ivalue::Tuple::elements_”: class“std::vector<c10::IValue,std::allocator<c10::IValue>>”需要有 dll 接口由 struct“c10::ivalue::Tuple”的客户端使用
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\c10\core\TensorImpl.h(53): message : 参见“std::vector<c10::IValue,std::allocator<c10::IValue>>”的声明
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\ATen\core\ivalue_inl.h(256,7): warning C4251: “c10::ivalue::Tuple::type_”: class“std::shared_ptr<c10::TupleType>”需要有 dll 接口由 struct“c10::ivalue::Tuple”的客户端使用
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\ATen\core\ivalue_inl.h(255): message : 参见“std::shared_ptr<c10::TupleType>”的声明
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\ATen\core\ivalue_inl.h(327,62): warning C4275: 非 dll 接口 class“std::exception”用作 dll 接口 struct“c10::ivalue::Future::FutureError”的基
C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.29.30133\include\vcruntime_exception.h(48): message : 参见“std::exception”的声明
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\ATen\core\ivalue_inl.h(327): message : 参见“c10::ivalue::Future::FutureError”的声明
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\ATen\core\ivalue_inl.h(337,17): warning C4251: “c10::ivalue::Future::FutureError::error_msg”: class“std::basic_string<char,std::char_traits<char>,std::allocator<char>>”需要有 dll 接口由 struct“c10::ivalue::Future::FutureError”的客户端使用
C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.29.30133\include\xstring(4871): message : 参见“std::basic_string<char,std::char_traits<char>,std::allocator<char>>”的声明
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\ATen\core\ivalue_inl.h(822,22): warning C4251: “c10::ivalue::Future::mutex_”: class“std::mutex”需要有 dll 接口由 struct“c10::ivalue::Future”的客户端使用
C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.29.30133\include\mutex(86): message : 参见“std::mutex”的声明
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\ATen\core\ivalue_inl.h(823,20): warning C4251: “c10::ivalue::Future::completed_”: struct“std::atomic<bool>”需要有 dll 接口由 struct“c10::ivalue::Future”的客户端使用
C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.29.30133\include\atomic(2835): message : 参见“std::atomic<bool>”的声明
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\ATen\core\ivalue_inl.h(824,27): warning C4251: “c10::ivalue::Future::finished_cv_”: class“std::condition_variable”需要有 dll 接口由 struct“c10::ivalue::Future”的客户端使用
C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.29.30133\include\mutex(570): message : 参见“std::condition_variable”的声明
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\ATen\core\ivalue_inl.h(827,11): warning C4251: “c10::ivalue::Future::type_”: class“std::shared_ptr<c10::Type>”需要有 dll 接口由 struct“c10::ivalue::Future”的客户端使用
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\ATen\core\List.h(20): message : 参见“std::shared_ptr<c10::Type>”的声明
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\ATen\core\ivalue_inl.h(828,45): warning C4251: “c10::ivalue::Future::callbacks_”: class“std::vector<std::function<void (c10::ivalue::Future &)>,std::allocator<std::function<void (c10::ivalue::Future &)>>>”需要有 dll 接口由 struct“c10::ivalue::Future”的客户端使用
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\ATen\core\ivalue_inl.h(828): message : 参见“std::vector<std::function<void (c10::ivalue::Future &)>,std::allocator<std::function<void (c10::ivalue::Future &)>>>”的声明
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\ATen\core\ivalue_inl.h(829,22): warning C4251: “c10::ivalue::Future::eptr_”: class“std::exception_ptr”需要有 dll 接口由 struct“c10::ivalue::Future”的客户端使用
C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.29.30133\include\exception(210): message : 参见“std::exception_ptr”的声明
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\ATen\core\ivalue_inl.h(833,37): warning C4251: “c10::ivalue::Future::impl_”: class“c10::impl::VirtualGuardImpl”需要有 dll 接口由 struct“c10::ivalue::Future”的客户端使用
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\c10\core\impl\VirtualGuardImpl.h(12): message : 参见“c10::impl::VirtualGuardImpl”的声明
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\ATen\core\ivalue_inl.h(838,25): warning C4251: “c10::ivalue::Future::currentDevice_”: class“c10::optional<c10::Device>”需要有 dll 接口由 struct“c10::ivalue::Future”的客户端使用
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\c10\core\TensorOptions.h(25): message : 参见“c10::optional<c10::Device>”的声明
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\ATen\core\ivalue_inl.h(844,27): warning C4251: “c10::ivalue::Future::events_”: class“std::vector<c10::Event,std::allocator<c10::Event>>”需要有 dll 接口由 struct“c10::ivalue::Future”的客户端使用
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\ATen\core\ivalue_inl.h(844): message : 参见“std::vector<c10::Event,std::allocator<c10::Event>>”的声明
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\ATen\core\ivalue_inl.h(848,28): warning C4251: “c10::ivalue::Future::storages_”: class“std::vector<c10::ivalue::Future::WeakStorage,std::allocator<c10::ivalue::Future::WeakStorage>>”需要有 dll 接口由 struct“c10::ivalue::Future”的客户端使用
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\ATen\core\ivalue_inl.h(374): message : 参见“std::vector<c10::ivalue::Future::WeakStorage,std::allocator<c10::ivalue::Future::WeakStorage>>”的声明
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\ATen\core\ivalue_inl.h(856,34): warning C4251: “c10::ivalue::Future::devices_”: class“std::vector<c10::Device,std::allocator<c10::Device>>”需要有 dll 接口由 struct“c10::ivalue::Future”的客户端使用
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\ATen\core\ivalue_inl.h(314): message : 参见“std::vector<c10::Device,std::allocator<c10::Device>>”的声明
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\c10\util\Optional.h(184,1): warning C4624: “c10::constexpr_storage_t<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=std::vector<c10::ivalue::Future::WeakStorage,std::allocator<c10::ivalue::Future::WeakStorage>>
          ]
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\c10\util\Optional.h(383): message : 查看对正在编译的 类 模板 实例化“c10::constexpr_storage_t<T>”的引用
          with
          [
              T=std::vector<c10::ivalue::Future::WeakStorage,std::allocator<c10::ivalue::Future::WeakStorage>>
          ]
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\c10\util\Optional.h(526): message : 查看对正在编译的 类 模板 实例化“c10::trivially_copyable_optimization_optional_base<T>”的引用
          with
          [
              T=std::vector<c10::ivalue::Future::WeakStorage,std::allocator<c10::ivalue::Future::WeakStorage>>
          ]
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\c10\util\Optional.h(526): message : 查看对正在编译的 别名 模板 实例化“c10::OptionalBase<std::vector<c10::ivalue::Future::WeakStorage,std::allocator<c10::ivalue::Future::WeakStorage>>>”的引用
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\ATen\core\ivalue_inl.h(374): message : 查看对正在编译的 类 模板 实例化“c10::optional<std::vector<c10::ivalue::Future::WeakStorage,std::allocator<c10::ivalue::Future::WeakStorage>>>”的引用
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\c10\util\Optional.h(418,1): warning C4624: “c10::trivially_copyable_optimization_optional_base<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=std::vector<c10::ivalue::Future::WeakStorage,std::allocator<c10::ivalue::Future::WeakStorage>>
          ]
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\ATen\core\ivalue_inl.h(953,23): warning C4251: “c10::ivalue::Object::slots_”: class“std::vector<c10::IValue,std::allocator<c10::IValue>>”需要有 dll 接口由 struct“c10::ivalue::Object”的客户端使用
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\c10\core\TensorImpl.h(53): message : 参见“std::vector<c10::IValue,std::allocator<c10::IValue>>”的声明
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\ATen\core\jit_type.h(145,26): warning C4251: “c10::UnionType::types_”: class“std::vector<c10::TypePtr,std::allocator<c10::TypePtr>>”需要有 dll 接口由 struct“c10::UnionType”的客户端使用
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\ATen\core\jit_type_base.h(205): message : 参见“std::vector<c10::TypePtr,std::allocator<c10::TypePtr>>”的声明
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\ATen\core\jit_type.h(200,11): warning C4251: “c10::OptionalType::contained_”: class“std::shared_ptr<c10::Type>”需要有 dll 接口由 struct“c10::OptionalType”的客户端使用
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\ATen\core\List.h(20): message : 参见“std::shared_ptr<c10::Type>”的声明
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\ATen\core\jit_type.h(251,25): warning C4251: “c10::Stride::stride_index_”: class“c10::optional<size_t>”需要有 dll 接口由 struct“c10::Stride”的客户端使用
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\ATen\core\jit_type.h(237): message : 参见“c10::optional<size_t>”的声明
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\ATen\core\jit_type.h(252,23): warning C4251: “c10::Stride::contiguous_”: class“c10::optional<bool>”需要有 dll 接口由 struct“c10::Stride”的客户端使用
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\c10\core\TensorOptions.h(44): message : 参见“c10::optional<bool>”的声明
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\ATen\core\jit_type.h(253,25): warning C4251: “c10::Stride::stride_”: class“c10::optional<size_t>”需要有 dll 接口由 struct“c10::Stride”的客户端使用
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\ATen\core\jit_type.h(237): message : 参见“c10::optional<size_t>”的声明
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\ATen\core\jit_type.h(319,30): warning C4251: “c10::ShapeSymbol::num_symbols”: struct“std::atomic<unsigned __int64>”需要有 dll 接口由 struct“c10::ShapeSymbol”的客户端使用
C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.29.30133\include\atomic(2847): message : 参见“std::atomic<unsigned __int64>”的声明
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\c10\util\Optional.h(184,1): warning C4624: “c10::constexpr_storage_t<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=std::vector<c10::ShapeSymbol,std::allocator<c10::ShapeSymbol>>
          ]
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\c10\util\Optional.h(383): message : 查看对正在编译的 类 模板 实例化“c10::constexpr_storage_t<T>”的引用
          with
          [
              T=std::vector<c10::ShapeSymbol,std::allocator<c10::ShapeSymbol>>
          ]
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\c10\util\Optional.h(526): message : 查看对正在编译的 类 模板 实例化“c10::trivially_copyable_optimization_optional_base<T>”的引用
          with
          [
              T=std::vector<c10::ShapeSymbol,std::allocator<c10::ShapeSymbol>>
          ]
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\c10\util\Optional.h(526): message : 查看对正在编译的 别名 模板 实例化“c10::OptionalBase<std::vector<c10::ShapeSymbol,std::allocator<c10::ShapeSymbol>>>”的引用
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\ATen\core\jit_type.h(426): message : 查看对正在编译的 类 模板 实例化“c10::optional<std::vector<c10::ShapeSymbol,std::allocator<c10::ShapeSymbol>>>”的引用
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\c10\util\Optional.h(418,1): warning C4624: “c10::trivially_copyable_optimization_optional_base<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=std::vector<c10::ShapeSymbol,std::allocator<c10::ShapeSymbol>>
          ]
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\ATen\core\jit_type.h(426,45): warning C4251: “c10::SymbolicShape::dims_”: class“c10::optional<std::vector<c10::ShapeSymbol,std::allocator<c10::ShapeSymbol>>>”需要有 dll 接口由 struct“c10::SymbolicShape”的客户端使用
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\ATen\core\jit_type.h(400): message : 参见“c10::optional<std::vector<c10::ShapeSymbol,std::allocator<c10::ShapeSymbol>>>”的声明
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\ATen\core\jit_type.h(747,33): warning C4251: “c10::TensorType::scalar_type_”: class“c10::optional<c10::ScalarType>”需要有 dll 接口由 struct“c10::TensorType”的客户端使用
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\c10\core\ScalarTypeToTypeMeta.h(29): message : 参见“c10::optional<c10::ScalarType>”的声明
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\ATen\core\jit_type.h(748,29): warning C4251: “c10::TensorType::device_”: class“c10::optional<c10::Device>”需要有 dll 接口由 struct“c10::TensorType”的客户端使用
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\c10\core\TensorOptions.h(25): message : 参见“c10::optional<c10::Device>”的声明
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\c10\util\Optional.h(184,1): warning C4624: “c10::constexpr_storage_t<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=std::vector<c10::optional<c10::Stride>,std::allocator<c10::optional<c10::Stride>>>
          ]
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\c10\util\Optional.h(383): message : 查看对正在编译的 类 模板 实例化“c10::constexpr_storage_t<T>”的引用
          with
          [
              T=std::vector<c10::optional<c10::Stride>,std::allocator<c10::optional<c10::Stride>>>
          ]
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\c10\util\Optional.h(526): message : 查看对正在编译的 类 模板 实例化“c10::trivially_copyable_optimization_optional_base<T>”的引用
          with
          [
              T=std::vector<c10::optional<c10::Stride>,std::allocator<c10::optional<c10::Stride>>>
          ]
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\c10\util\Optional.h(526): message : 查看对正在编译的 别名 模板 实例化“c10::OptionalBase<std::vector<c10::optional<c10::Stride>,std::allocator<c10::optional<c10::Stride>>>>”的引用
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\ATen\core\jit_type.h(511): message : 查看对正在编译的 类 模板 实例化“c10::optional<std::vector<c10::optional<c10::Stride>,std::allocator<c10::optional<c10::Stride>>>>”的引用
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\ATen\core\jit_type.h(750): message : 查看对正在编译的 类 模板 实例化“c10::VaryingShape<c10::Stride>”的引用
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\c10\util\Optional.h(418,1): warning C4624: “c10::trivially_copyable_optimization_optional_base<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=std::vector<c10::optional<c10::Stride>,std::allocator<c10::optional<c10::Stride>>>
          ]
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\ATen\core\jit_type.h(750,24): warning C4251: “c10::TensorType::strides_”: struct“c10::VaryingShape<c10::Stride>”需要有 dll 接口由 struct“c10::TensorType”的客户端使用
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\ATen\core\jit_type.h(535): message : 参见“c10::VaryingShape<c10::Stride>”的声明
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\ATen\core\jit_type.h(751,23): warning C4251: “c10::TensorType::requires_grad_”: class“c10::optional<bool>”需要有 dll 接口由 struct“c10::TensorType”的客户端使用
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\c10\core\TensorOptions.h(44): message : 参见“c10::optional<bool>”的声明
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\ATen\core\jit_type.h(763,23): warning C4251: “c10::TensorType::undefined_”: class“c10::optional<bool>”需要有 dll 接口由 struct“c10::TensorType”的客户端使用
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\c10\core\TensorOptions.h(44): message : 参见“c10::optional<bool>”的声明
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\c10\util\Optional.h(184,1): warning C4624: “c10::constexpr_storage_t<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=std::vector<c10::optional<int64_t>,std::allocator<c10::optional<int64_t>>>
          ]
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\c10\util\Optional.h(383): message : 查看对正在编译的 类 模板 实例化“c10::constexpr_storage_t<T>”的引用
          with
          [
              T=std::vector<c10::optional<int64_t>,std::allocator<c10::optional<int64_t>>>
          ]
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\c10\util\Optional.h(526): message : 查看对正在编译的 类 模板 实例化“c10::trivially_copyable_optimization_optional_base<T>”的引用
          with
          [
              T=std::vector<c10::optional<int64_t>,std::allocator<c10::optional<int64_t>>>
          ]
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\c10\util\Optional.h(526): message : 查看对正在编译的 别名 模板 实例化“c10::OptionalBase<std::vector<c10::optional<int64_t>,std::allocator<c10::optional<int64_t>>>>”的引用
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\ATen\core\jit_type.h(511): message : 查看对正在编译的 类 模板 实例化“c10::optional<std::vector<c10::optional<int64_t>,std::allocator<c10::optional<int64_t>>>>”的引用
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\ATen\core\jit_type.h(556): message : 查看对正在编译的 类 模板 实例化“c10::VaryingShape<int64_t>”的引用
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\c10\util\Optional.h(418,1): warning C4624: “c10::trivially_copyable_optimization_optional_base<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=std::vector<c10::optional<int64_t>,std::allocator<c10::optional<int64_t>>>
          ]
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\c10\util\Optional.h(184,1): warning C4624: “c10::constexpr_storage_t<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=std::vector<int64_t,std::allocator<int64_t>>
          ]
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\c10\util\Optional.h(383): message : 查看对正在编译的 类 模板 实例化“c10::constexpr_storage_t<T>”的引用
          with
          [
              T=std::vector<int64_t,std::allocator<int64_t>>
          ]
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\c10\util\Optional.h(526): message : 查看对正在编译的 类 模板 实例化“c10::trivially_copyable_optimization_optional_base<T>”的引用
          with
          [
              T=std::vector<int64_t,std::allocator<int64_t>>
          ]
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\c10\util\Optional.h(526): message : 查看对正在编译的 别名 模板 实例化“c10::OptionalBase<std::vector<int64_t,std::allocator<int64_t>>>”的引用
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\ATen\core\jit_type.h(654): message : 查看对正在编译的 类 模板 实例化“c10::optional<std::vector<int64_t,std::allocator<int64_t>>>”的引用
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\c10\util\Optional.h(418,1): warning C4624: “c10::trivially_copyable_optimization_optional_base<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=std::vector<int64_t,std::allocator<int64_t>>
          ]
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\ATen\core\jit_type.h(771,62): warning C4251: “c10::SingleElementType<c10::TypeKind::ListType,c10::ListType>::elem”: class“std::shared_ptr<c10::Type>”需要有 dll 接口由 struct“c10::SingleElementType<c10::TypeKind::ListType,c10::ListType>”的客户端使用
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\ATen\core\List.h(20): message : 参见“std::shared_ptr<c10::Type>”的声明
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\ATen\core\jit_type.h(891,24): warning C4251: “c10::DictType::types”: class“std::vector<c10::TypePtr,std::allocator<c10::TypePtr>>”需要有 dll 接口由 struct“c10::DictType”的客户端使用
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\ATen\core\jit_type_base.h(205): message : 参见“std::vector<c10::TypePtr,std::allocator<c10::TypePtr>>”的声明
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\ATen\core\jit_type.h(899,66): warning C4251: “c10::SingleElementType<c10::TypeKind::FutureType,c10::FutureType>::elem”: class“std::shared_ptr<c10::Type>”需要有 dll 接口由 struct“c10::SingleElementType<c10::TypeKind::FutureType,c10::FutureType>”的客户端使用
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\ATen\core\List.h(20): message : 参见“std::shared_ptr<c10::Type>”的声明
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\ATen\core\jit_type.h(941,62): warning C4251: “c10::SingleElementType<c10::TypeKind::RRefType,c10::RRefType>::elem”: class“std::shared_ptr<c10::Type>”需要有 dll 接口由 struct“c10::SingleElementType<c10::TypeKind::RRefType,c10::RRefType>”的客户端使用
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\ATen\core\List.h(20): message : 参见“std::shared_ptr<c10::Type>”的声明
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\c10\util\Optional.h(184,1): warning C4624: “c10::constexpr_storage_t<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=c10::QualifiedName
          ]
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\c10\util\Optional.h(383): message : 查看对正在编译的 类 模板 实例化“c10::constexpr_storage_t<T>”的引用
          with
          [
              T=c10::QualifiedName
          ]
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\c10\util\Optional.h(526): message : 查看对正在编译的 类 模板 实例化“c10::trivially_copyable_optimization_optional_base<T>”的引用
          with
          [
              T=c10::QualifiedName
          ]
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\c10\util\Optional.h(526): message : 查看对正在编译的 别名 模板 实例化“c10::OptionalBase<c10::QualifiedName>”的引用
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\ATen\core\jit_type.h(990): message : 查看对正在编译的 类 模板 实例化“c10::optional<c10::QualifiedName>”的引用
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\c10\util\Optional.h(418,1): warning C4624: “c10::trivially_copyable_optimization_optional_base<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=c10::QualifiedName
          ]
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\ATen\core\jit_type.h(990,32): warning C4251: “c10::NamedType::name_”: class“c10::optional<c10::QualifiedName>”需要有 dll 接口由 struct“c10::NamedType”的客户端使用
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\ATen\core\jit_type.h(974): message : 参见“c10::optional<c10::QualifiedName>”的声明
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\ATen\core\jit_type.h(1083,24): warning C4251: “c10::TupleType::elements_”: class“std::vector<c10::TypePtr,std::allocator<c10::TypePtr>>”需要有 dll 接口由 struct“c10::TupleType”的客户端使用
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\ATen\core\jit_type_base.h(205): message : 参见“std::vector<c10::TypePtr,std::allocator<c10::TypePtr>>”的声明
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\ATen\core\jit_type.h(1085,35): warning C4251: “c10::TupleType::schema_”: class“std::shared_ptr<c10::FunctionSchema>”需要有 dll 接口由 struct“c10::TupleType”的客户端使用
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\ATen\core\jit_type.h(1051): message : 参见“std::shared_ptr<c10::FunctionSchema>”的声明
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\ATen\core\jit_type.h(1167,11): warning C4251: “c10::EnumType::value_type_”: class“std::shared_ptr<c10::Type>”需要有 dll 接口由 struct“c10::EnumType”的客户端使用
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\ATen\core\List.h(20): message : 参见“std::shared_ptr<c10::Type>”的声明
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\ATen\core\jit_type.h(1168,30): warning C4251: “c10::EnumType::enum_names_values_”: class“std::vector<c10::EnumNameValue,std::allocator<c10::EnumNameValue>>”需要有 dll 接口由 struct“c10::EnumType”的客户端使用
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\ATen\core\jit_type.h(1097): message : 参见“std::vector<c10::EnumNameValue,std::allocator<c10::EnumNameValue>>”的声明
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\ATen\core\jit_type.h(1169,48): warning C4251: “c10::EnumType::cu_”: class“std::weak_ptr<torch::jit::CompilationUnit>”需要有 dll 接口由 struct“c10::EnumType”的客户端使用
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\ATen\core\jit_type.h(1097): message : 参见“std::weak_ptr<torch::jit::CompilationUnit>”的声明
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\ATen\core\jit_type.h(1932,11): warning C4251: “c10::ClassAttribute::attributeType_”: class“std::shared_ptr<c10::Type>”需要有 dll 接口由 struct“c10::ClassAttribute”的客户端使用
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\ATen\core\List.h(20): message : 参见“std::shared_ptr<c10::Type>”的声明
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\ATen\core\jit_type.h(1933,15): warning C4251: “c10::ClassAttribute::attributeName_”: class“std::basic_string<char,std::char_traits<char>,std::allocator<char>>”需要有 dll 接口由 struct“c10::ClassAttribute”的客户端使用
C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.29.30133\include\xstring(4871): message : 参见“std::basic_string<char,std::char_traits<char>,std::allocator<char>>”的声明
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\ATen\core\jit_type.h(2305,28): warning C4251: “c10::ClassType::constantNames_”: class“std::vector<std::string,std::allocator<std::string>>”需要有 dll 接口由 struct“c10::ClassType”的客户端使用
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\c10\util\Exception.h(35): message : 参见“std::vector<std::string,std::allocator<std::string>>”的声明
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\ATen\core\jit_type.h(2306,23): warning C4251: “c10::ClassType::constantValues_”: class“std::vector<c10::IValue,std::allocator<c10::IValue>>”需要有 dll 接口由 struct“c10::ClassType”的客户端使用
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\c10\core\TensorImpl.h(53): message : 参见“std::vector<c10::IValue,std::allocator<c10::IValue>>”的声明
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\ATen\core\jit_type.h(2308,34): warning C4251: “c10::ClassType::compilation_unit_”: class“std::weak_ptr<torch::jit::CompilationUnit>”需要有 dll 接口由 struct“c10::ClassType”的客户端使用
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\ATen\core\jit_type.h(1097): message : 参见“std::weak_ptr<torch::jit::CompilationUnit>”的声明
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\ATen\core\jit_type.h(2311,31): warning C4251: “c10::ClassType::attributes_”: class“std::vector<c10::ClassAttribute,std::allocator<c10::ClassAttribute>>”需要有 dll 接口由 struct“c10::ClassType”的客户端使用
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\ATen\core\jit_type.h(2215): message : 参见“std::vector<c10::ClassAttribute,std::allocator<c10::ClassAttribute>>”的声明
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\ATen\core\jit_type.h(2314,24): warning C4251: “c10::ClassType::attributeTypes_”: class“std::vector<c10::TypePtr,std::allocator<c10::TypePtr>>”需要有 dll 接口由 struct“c10::ClassType”的客户端使用
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\ATen\core\jit_type_base.h(205): message : 参见“std::vector<c10::TypePtr,std::allocator<c10::TypePtr>>”的声明
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\ATen\core\jit_type.h(2317,38): warning C4251: “c10::ClassType::methods_”: class“std::vector<torch::jit::Function *,std::allocator<torch::jit::Function *>>”需要有 dll 接口由 struct“c10::ClassType”的客户端使用
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\ATen\core\jit_type.h(1984): message : 参见“std::vector<torch::jit::Function *,std::allocator<torch::jit::Function *>>”的声明
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\ATen\core\jit_type.h(2318,38): warning C4251: “c10::ClassType::staticmethods_”: class“std::vector<torch::jit::Function *,std::allocator<torch::jit::Function *>>”需要有 dll 接口由 struct“c10::ClassType”的客户端使用
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\ATen\core\jit_type.h(1984): message : 参见“std::vector<torch::jit::Function *,std::allocator<torch::jit::Function *>>”的声明
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\ATen\core\jit_type.h(2321,38): warning C4251: “c10::ClassType::forward_hooks_”: class“std::vector<torch::jit::Function *,std::allocator<torch::jit::Function *>>”需要有 dll 接口由 struct“c10::ClassType”的客户端使用
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\ATen\core\jit_type.h(1984): message : 参见“std::vector<torch::jit::Function *,std::allocator<torch::jit::Function *>>”的声明
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\ATen\core\jit_type.h(2322,38): warning C4251: “c10::ClassType::forward_pre_hooks_”: class“std::vector<torch::jit::Function *,std::allocator<torch::jit::Function *>>”需要有 dll 接口由 struct“c10::ClassType”的客户端使用
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\ATen\core\jit_type.h(1984): message : 参见“std::vector<torch::jit::Function *,std::allocator<torch::jit::Function *>>”的声明
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\ATen\core\jit_type.h(2325,25): warning C4251: “c10::ClassType::properties_”: class“std::vector<c10::ClassType::Property,std::allocator<c10::ClassType::Property>>”需要有 dll 接口由 struct“c10::ClassType”的客户端使用
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\ATen\core\jit_type.h(2122): message : 参见“std::vector<c10::ClassType::Property,std::allocator<c10::ClassType::Property>>”的声明
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\ATen\core\jit_type.h(2330,15): warning C4251: “c10::ClassType::doc_string_”: class“std::basic_string<char,std::char_traits<char>,std::allocator<char>>”需要有 dll 接口由 struct“c10::ClassType”的客户端使用
C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.29.30133\include\xstring(4871): message : 参见“std::basic_string<char,std::char_traits<char>,std::allocator<char>>”的声明
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\ATen\core\jit_type.h(2333,28): warning C4251: “c10::ClassType::unresolved_class_attributes_”: class“std::vector<std::string,std::allocator<std::string>>”需要有 dll 接口由 struct“c10::ClassType”的客户端使用
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\c10\util\Exception.h(35): message : 参见“std::vector<std::string,std::allocator<std::string>>”的声明
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\ATen\core\jit_type.h(2391,48): warning C4251: “c10::InterfaceType::methods_”: class“std::shared_ptr<std::vector<c10::FunctionSchema,std::allocator<c10::FunctionSchema>>>”需要有 dll 接口由 struct“c10::InterfaceType”的客户端使用
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\ATen\core\jit_type.h(2391): message : 参见“std::shared_ptr<std::vector<c10::FunctionSchema,std::allocator<c10::FunctionSchema>>>”的声明
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\torch\csrc\autograd\forward_grad.h(106,54): warning C4251: “torch::autograd::ForwardADLevel::grads_”: class“std::unordered_set<std::shared_ptr<torch::autograd::ForwardGrad>,std::hash<std::shared_ptr<torch::autograd::ForwardGrad>>,std::equal_to<std::shared_ptr<torch::autograd::ForwardGrad>>,std::allocator<std::shared_ptr<torch::autograd::ForwardGrad>>>”需要有 dll 接口由 struct“torch::autograd::ForwardADLevel”的客户端使用
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\torch\csrc\autograd\forward_grad.h(106): message : 参见“std::unordered_set<std::shared_ptr<torch::autograd::ForwardGrad>,std::hash<std::shared_ptr<torch::autograd::ForwardGrad>>,std::equal_to<std::shared_ptr<torch::autograd::ForwardGrad>>,std::allocator<std::shared_ptr<torch::autograd::ForwardGrad>>>”的声明
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\torch\csrc\autograd\forward_grad.h(107,16): warning C4251: “torch::autograd::ForwardADLevel::mutex_”: class“std::mutex”需要有 dll 接口由 struct“torch::autograd::ForwardADLevel”的客户端使用
C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.29.30133\include\mutex(86): message : 参见“std::mutex”的声明
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\torch\csrc\autograd\forward_grad.h(112,74): warning C4251: “std::enable_shared_from_this<torch::autograd::ForwardGrad>::_Wptr”: class“std::weak_ptr<_Ty>”需要有 dll 接口由 class“std::enable_shared_from_this<torch::autograd::ForwardGrad>”的客户端使用
          with
          [
              _Ty=torch::autograd::ForwardGrad
          ]
C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.29.30133\include\memory(3052): message : 参见“std::weak_ptr<_Ty>”的声明
          with
          [
              _Ty=torch::autograd::ForwardGrad
          ]
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\torch\csrc\autograd\forward_grad.h(184,46): warning C4251: “torch::autograd::ForwardGrad::content_”: class“std::unordered_map<uint64_t,at::Tensor,std::hash<uint64_t>,std::equal_to<uint64_t>,std::allocator<std::pair<const uint64_t,at::Tensor>>>”需要有 dll 接口由 struct“torch::autograd::ForwardGrad”的客户端使用
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\torch\csrc\autograd\forward_grad.h(184): message : 参见“std::unordered_map<uint64_t,at::Tensor,std::hash<uint64_t>,std::equal_to<uint64_t>,std::allocator<std::pair<const uint64_t,at::Tensor>>>”的声明
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\torch\csrc\autograd\forward_grad.h(185,24): warning C4251: “torch::autograd::ForwardGrad::mutex_”: class“std::mutex”需要有 dll 接口由 struct“torch::autograd::ForwardGrad”的客户端使用
C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.29.30133\include\mutex(86): message : 参见“std::mutex”的声明
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\torch\csrc\autograd\variable.h(191,15): warning C4251: “torch::autograd::AutogradMeta::name_”: class“std::basic_string<char,std::char_traits<char>,std::allocator<char>>”需要有 dll 接口由 struct“torch::autograd::AutogradMeta”的客户端使用
C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.29.30133\include\xstring(4871): message : 参见“std::basic_string<char,std::char_traits<char>,std::allocator<char>>”的声明
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\torch\csrc\autograd\variable.h(194,25): warning C4251: “torch::autograd::AutogradMeta::grad_fn_”: class“std::shared_ptr<torch::autograd::Node>”需要有 dll 接口由 struct“torch::autograd::AutogradMeta”的客户端使用
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\ATen\core\TensorBase.h(663): message : 参见“std::shared_ptr<torch::autograd::Node>”的声明
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\torch\csrc\autograd\variable.h(195,23): warning C4251: “torch::autograd::AutogradMeta::grad_accumulator_”: class“std::weak_ptr<torch::autograd::Node>”需要有 dll 接口由 struct“torch::autograd::AutogradMeta”的客户端使用
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\torch\csrc\autograd\variable.h(122): message : 参见“std::weak_ptr<torch::autograd::Node>”的声明
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\torch\csrc\autograd\variable.h(206,32): warning C4251: “torch::autograd::AutogradMeta::fw_grad_”: class“std::shared_ptr<torch::autograd::ForwardGrad>”需要有 dll 接口由 struct“torch::autograd::AutogradMeta”的客户端使用
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\torch\csrc\autograd\forward_grad.h(95): message : 参见“std::shared_ptr<torch::autograd::ForwardGrad>”的声明
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\torch\csrc\autograd\variable.h(208,49): warning C4251: “torch::autograd::AutogradMeta::hooks_”: class“std::vector<std::shared_ptr<torch::autograd::FunctionPreHook>,std::allocator<std::shared_ptr<torch::autograd::FunctionPreHook>>>”需要有 dll 接口由 struct“torch::autograd::AutogradMeta”的客户端使用
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\torch\csrc\autograd\variable.h(175): message : 参见“std::vector<std::shared_ptr<torch::autograd::FunctionPreHook>,std::allocator<std::shared_ptr<torch::autograd::FunctionPreHook>>>”的声明
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\torch\csrc\autograd\variable.h(209,31): warning C4251: “torch::autograd::AutogradMeta::cpp_hooks_list_”: class“std::shared_ptr<torch::autograd::hooks_list>”需要有 dll 接口由 struct“torch::autograd::AutogradMeta”的客户端使用
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\torch\csrc\autograd\cpp_hook.h(11): message : 参见“std::shared_ptr<torch::autograd::hooks_list>”的声明
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\torch\csrc\autograd\variable.h(230,22): warning C4251: “torch::autograd::AutogradMeta::mutex_”: class“std::mutex”需要有 dll 接口由 struct“torch::autograd::AutogradMeta”的客户端使用
C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.29.30133\include\mutex(86): message : 参见“std::mutex”的声明
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\torch\csrc\autograd\variable.h(298,44): warning C4251: “torch::autograd::ViewInfo::view_fn_”: class“std::function<torch::autograd::Variable (const torch::autograd::Variable &)>”需要有 dll 接口由 struct“torch::autograd::ViewInfo”的客户端使用
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\torch\csrc\autograd\variable.h(298): message : 参见“std::function<torch::autograd::Variable (const torch::autograd::Variable &)>”的声明
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\c10\util\Optional.h(184,1): warning C4624: “c10::constexpr_storage_t<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=torch::autograd::ViewInfo
          ]
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\c10\util\Optional.h(383): message : 查看对正在编译的 类 模板 实例化“c10::constexpr_storage_t<T>”的引用
          with
          [
              T=torch::autograd::ViewInfo
          ]
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\c10\util\Optional.h(526): message : 查看对正在编译的 类 模板 实例化“c10::trivially_copyable_optimization_optional_base<T>”的引用
          with
          [
              T=torch::autograd::ViewInfo
          ]
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\c10\util\Optional.h(526): message : 查看对正在编译的 别名 模板 实例化“c10::OptionalBase<torch::autograd::ViewInfo>”的引用
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\torch\csrc\autograd\variable.h(525): message : 查看对正在编译的 类 模板 实例化“c10::optional<torch::autograd::ViewInfo>”的引用
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\c10\util\Optional.h(418,1): warning C4624: “c10::trivially_copyable_optimization_optional_base<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=torch::autograd::ViewInfo
          ]
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\torch\csrc\autograd\variable.h(525,27): warning C4251: “torch::autograd::DifferentiableViewMeta::backward_info_”: class“c10::optional<torch::autograd::ViewInfo>”需要有 dll 接口由 struct“torch::autograd::DifferentiableViewMeta”的客户端使用
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\torch\csrc\autograd\variable.h(525): message : 参见“c10::optional<torch::autograd::ViewInfo>”的声明
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\torch\csrc\autograd\variable.h(526,27): warning C4251: “torch::autograd::DifferentiableViewMeta::forward_info_”: class“c10::optional<torch::autograd::ViewInfo>”需要有 dll 接口由 struct“torch::autograd::DifferentiableViewMeta”的客户端使用
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\torch\csrc\autograd\variable.h(525): message : 参见“c10::optional<torch::autograd::ViewInfo>”的声明
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\c10\util\Optional.h(184,1): warning C4624: “c10::constexpr_storage_t<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=c10::IValue
          ]
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\c10\util\Optional.h(383): message : 查看对正在编译的 类 模板 实例化“c10::constexpr_storage_t<T>”的引用
          with
          [
              T=c10::IValue
          ]
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\c10\util\Optional.h(526): message : 查看对正在编译的 类 模板 实例化“c10::trivially_copyable_optimization_optional_base<T>”的引用
          with
          [
              T=c10::IValue
          ]
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\c10\util\Optional.h(526): message : 查看对正在编译的 别名 模板 实例化“c10::OptionalBase<c10::IValue>”的引用
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\ATen\core\function_schema.h(124): message : 查看对正在编译的 类 模板 实例化“c10::optional<c10::IValue>”的引用
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\c10\util\Optional.h(418,1): warning C4624: “c10::trivially_copyable_optimization_optional_base<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=c10::IValue
          ]
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\c10\util\Optional.h(184,1): warning C4624: “c10::constexpr_storage_t<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=c10::AliasInfo
          ]
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\c10\util\Optional.h(383): message : 查看对正在编译的 类 模板 实例化“c10::constexpr_storage_t<T>”的引用
          with
          [
              T=c10::AliasInfo
          ]
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\c10\util\Optional.h(526): message : 查看对正在编译的 类 模板 实例化“c10::trivially_copyable_optimization_optional_base<T>”的引用
          with
          [
              T=c10::AliasInfo
          ]
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\c10\util\Optional.h(526): message : 查看对正在编译的 别名 模板 实例化“c10::OptionalBase<c10::AliasInfo>”的引用
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\ATen\core\function_schema.h(125): message : 查看对正在编译的 类 模板 实例化“c10::optional<c10::AliasInfo>”的引用
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\c10\util\Optional.h(418,1): warning C4624: “c10::trivially_copyable_optimization_optional_base<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=c10::AliasInfo
          ]
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\torch\csrc\api\include\torch\imethod.h(44,36): warning C4251: “torch::IMethod::argumentNames_”: class“std::vector<std::string,std::allocator<std::string>>”需要有 dll 接口由 class“torch::IMethod”的客户端使用
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\c10\util\Exception.h(35): message : 参见“std::vector<std::string,std::allocator<std::string>>”的声明
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\torch\csrc\jit\ir\attributes.h(132,52): warning C4275: 非 dll 接口 struct“torch::jit::AttributeValue”用作 dll 接口 struct“torch::jit::GraphAttr”的基
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\torch\csrc\jit\ir\attributes.h(61): message : 参见“torch::jit::AttributeValue”的声明
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\torch\csrc\jit\ir\attributes.h(132): message : 参见“torch::jit::GraphAttr”的声明
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\torch\csrc\jit\ir\attributes.h(146,26): warning C4251: “torch::jit::GraphAttr::value_”: class“std::shared_ptr<torch::jit::Graph>”需要有 dll 接口由 struct“torch::jit::GraphAttr”的客户端使用
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\ATen\core\function.h(26): message : 参见“std::shared_ptr<torch::jit::Graph>”的声明
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\torch\csrc\jit\ir\attributes.h(149,53): warning C4275: 非 dll 接口 struct“torch::jit::AttributeValue”用作 dll 接口 struct“torch::jit::GraphsAttr”的基
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\torch\csrc\jit\ir\attributes.h(61): message : 参见“torch::jit::AttributeValue”的声明
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\torch\csrc\jit\ir\attributes.h(149): message : 参见“torch::jit::GraphsAttr”的声明
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\torch\csrc\jit\ir\attributes.h(164,13): warning C4251: “torch::jit::GraphsAttr::value_”: class“std::vector<std::shared_ptr<torch::jit::Graph>,std::allocator<std::shared_ptr<torch::jit::Graph>>>”需要有 dll 接口由 struct“torch::jit::GraphsAttr”的客户端使用
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\torch\csrc\jit\ir\attributes.h(150): message : 参见“std::vector<std::shared_ptr<torch::jit::Graph>,std::allocator<std::shared_ptr<torch::jit::Graph>>>”的声明
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\torch\csrc\jit\frontend\source_range.h(177,27): warning C4251: “torch::jit::SourceRange::source_”: class“std::shared_ptr<torch::jit::Source>”需要有 dll 接口由 struct“torch::jit::SourceRange”的客户端使用
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\torch\csrc\jit\frontend\source_range.h(111): message : 参见“std::shared_ptr<torch::jit::Source>”的声明
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\c10\util\Optional.h(184,1): warning C4624: “c10::constexpr_storage_t<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=std::tuple<std::string,size_t,size_t>
          ]
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\c10\util\Optional.h(383): message : 查看对正在编译的 类 模板 实例化“c10::constexpr_storage_t<T>”的引用
          with
          [
              T=std::tuple<std::string,size_t,size_t>
          ]
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\c10\util\Optional.h(526): message : 查看对正在编译的 类 模板 实例化“c10::trivially_copyable_optimization_optional_base<T>”的引用
          with
          [
              T=std::tuple<std::string,size_t,size_t>
          ]
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\c10\util\Optional.h(526): message : 查看对正在编译的 别名 模板 实例化“c10::OptionalBase<std::tuple<std::string,size_t,size_t>>”的引用
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\torch\csrc\jit\frontend\source_range.h(146): message : 查看对正在编译的 类 模板 实例化“c10::optional<std::tuple<std::string,size_t,size_t>>”的引用
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\c10\util\Optional.h(418,1): warning C4624: “c10::trivially_copyable_optimization_optional_base<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=std::tuple<std::string,size_t,size_t>
          ]
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\c10\util\Optional.h(184,1): warning C4624: “c10::constexpr_storage_t<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=torch::jit::SourceRange
          ]
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\c10\util\Optional.h(383): message : 查看对正在编译的 类 模板 实例化“c10::constexpr_storage_t<T>”的引用
          with
          [
              T=torch::jit::SourceRange
          ]
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\c10\util\Optional.h(526): message : 查看对正在编译的 类 模板 实例化“c10::trivially_copyable_optimization_optional_base<T>”的引用
          with
          [
              T=torch::jit::SourceRange
          ]
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\c10\util\Optional.h(526): message : 查看对正在编译的 别名 模板 实例化“c10::OptionalBase<torch::jit::SourceRange>”的引用
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\torch\csrc\jit\frontend\source_range.h(169): message : 查看对正在编译的 类 模板 实例化“c10::optional<torch::jit::SourceRange>”的引用
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\c10\util\Optional.h(418,1): warning C4624: “c10::trivially_copyable_optimization_optional_base<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=torch::jit::SourceRange
          ]
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\torch\csrc\jit\ir\scope.h(32,12): warning C4251: “torch::jit::Scope::parent_”: class“c10::intrusive_ptr<torch::jit::Scope,c10::detail::intrusive_target_default_null_type<TTarget>>”需要有 dll 接口由 struct“torch::jit::Scope”的客户端使用
          with
          [
              TTarget=torch::jit::Scope
          ]
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\torch\csrc\jit\ir\scope.h(27): message : 参见“c10::intrusive_ptr<torch::jit::Scope,c10::detail::intrusive_target_default_null_type<TTarget>>”的声明
          with
          [
              TTarget=torch::jit::Scope
          ]
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\c10\util\Optional.h(184,1): warning C4624: “c10::constexpr_storage_t<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=torch::jit::InlinedCallStackPtr
          ]
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\c10\util\Optional.h(383): message : 查看对正在编译的 类 模板 实例化“c10::constexpr_storage_t<T>”的引用
          with
          [
              T=torch::jit::InlinedCallStackPtr
          ]
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\c10\util\Optional.h(526): message : 查看对正在编译的 类 模板 实例化“c10::trivially_copyable_optimization_optional_base<T>”的引用
          with
          [
              T=torch::jit::InlinedCallStackPtr
          ]
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\c10\util\Optional.h(526): message : 查看对正在编译的 别名 模板 实例化“c10::OptionalBase<torch::jit::InlinedCallStackPtr>”的引用
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\torch\csrc\jit\ir\scope.h(127): message : 查看对正在编译的 类 模板 实例化“c10::optional<torch::jit::InlinedCallStackPtr>”的引用
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\c10\util\Optional.h(418,1): warning C4624: “c10::trivially_copyable_optimization_optional_base<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=torch::jit::InlinedCallStackPtr
          ]
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\torch\csrc\jit\ir\scope.h(127,38): warning C4251: “torch::jit::InlinedCallStack::callee_”: class“c10::optional<torch::jit::InlinedCallStackPtr>”需要有 dll 接口由 struct“torch::jit::InlinedCallStack”的客户端使用
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\torch\csrc\jit\ir\scope.h(127): message : 参见“c10::optional<torch::jit::InlinedCallStackPtr>”的声明
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\torch\csrc\jit\ir\scope.h(137,15): warning C4251: “torch::jit::InlinedCallStack::fn_name_”: class“std::basic_string<char,std::char_traits<char>,std::allocator<char>>”需要有 dll 接口由 struct“torch::jit::InlinedCallStack”的客户端使用
C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.29.30133\include\xstring(4871): message : 参见“std::basic_string<char,std::char_traits<char>,std::allocator<char>>”的声明
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\c10\util\Optional.h(184,1): warning C4624: “c10::constexpr_storage_t<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=torch::jit::ModuleInstanceInfo
          ]
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\c10\util\Optional.h(383): message : 查看对正在编译的 类 模板 实例化“c10::constexpr_storage_t<T>”的引用
          with
          [
              T=torch::jit::ModuleInstanceInfo
          ]
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\c10\util\Optional.h(526): message : 查看对正在编译的 类 模板 实例化“c10::trivially_copyable_optimization_optional_base<T>”的引用
          with
          [
              T=torch::jit::ModuleInstanceInfo
          ]
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\c10\util\Optional.h(526): message : 查看对正在编译的 别名 模板 实例化“c10::OptionalBase<torch::jit::ModuleInstanceInfo>”的引用
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\torch\csrc\jit\ir\scope.h(140): message : 查看对正在编译的 类 模板 实例化“c10::optional<torch::jit::ModuleInstanceInfo>”的引用
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\c10\util\Optional.h(418,1): warning C4624: “c10::trivially_copyable_optimization_optional_base<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=torch::jit::ModuleInstanceInfo
          ]
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\torch\csrc\jit\ir\scope.h(140,37): warning C4251: “torch::jit::InlinedCallStack::module_instance_info_”: class“c10::optional<torch::jit::ModuleInstanceInfo>”需要有 dll 接口由 struct“torch::jit::InlinedCallStack”的客户端使用
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\torch\csrc\jit\ir\scope.h(123): message : 参见“c10::optional<torch::jit::ModuleInstanceInfo>”的声明
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\torch\csrc\jit\ir\constants.h(21,75): warning C4275: 非 dll 接口 class“std::runtime_error”用作 dll 接口 struct“torch::jit::constant_not_supported_error”的基
C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.29.30133\include\stdexcept(101): message : 参见“std::runtime_error”的声明
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\torch\csrc\jit\ir\constants.h(21): message : 参见“torch::jit::constant_not_supported_error”的声明
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\c10\util\Optional.h(184,1): warning C4624: “c10::constexpr_storage_t<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=torch::jit::ScopePtr
          ]
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\c10\util\Optional.h(383): message : 查看对正在编译的 类 模板 实例化“c10::constexpr_storage_t<T>”的引用
          with
          [
              T=torch::jit::ScopePtr
          ]
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\c10\util\Optional.h(526): message : 查看对正在编译的 类 模板 实例化“c10::trivially_copyable_optimization_optional_base<T>”的引用
          with
          [
              T=torch::jit::ScopePtr
          ]
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\c10\util\Optional.h(526): message : 查看对正在编译的 别名 模板 实例化“c10::OptionalBase<torch::jit::ScopePtr>”的引用
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\torch\csrc\jit\ir\constants.h(29): message : 查看对正在编译的 类 模板 实例化“c10::optional<torch::jit::ScopePtr>”的引用
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\c10\util\Optional.h(418,1): warning C4624: “c10::trivially_copyable_optimization_optional_base<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=torch::jit::ScopePtr
          ]
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\ATen\core\boxing\KernelFunction.h(265,35): warning C4251: “c10::KernelFunction::functor_”: class“std::shared_ptr<c10::OperatorKernel>”需要有 dll 接口由 class“c10::KernelFunction”的客户端使用
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\ATen\core\boxing\KernelFunction.h(265): message : 参见“std::shared_ptr<c10::OperatorKernel>”的声明
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\ATen\core\dispatch\DispatchKeyExtractor.h(200,22): warning C4251: “c10::DispatchKeyExtractor::dispatch_arg_indices_reverse_”: struct“c10::utils::bitset”需要有 dll 接口由 struct“c10::DispatchKeyExtractor”的客户端使用
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\c10\util\Bitset.h(22): message : 参见“c10::utils::bitset”的声明
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\ATen\core\dispatch\DispatchKeyExtractor.h(203,18): warning C4251: “c10::DispatchKeyExtractor::nonFallthroughKeys_”: class“c10::DispatchKeySet”需要有 dll 接口由 struct“c10::DispatchKeyExtractor”的客户端使用
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\c10\core\DispatchKeySet.h(35): message : 参见“c10::DispatchKeySet”的声明
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\ATen\core\dispatch\CppSignature.h(57,21): warning C4251: “c10::impl::CppSignature::signature_”: class“std::type_index”需要有 dll 接口由 class“c10::impl::CppSignature”的客户端使用
C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.29.30133\include\typeindex(25): message : 参见“std::type_index”的声明
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\ATen\core\dispatch\OperatorEntry.h(192,16): warning C4251: “c10::impl::OperatorEntry::name_”: struct“c10::OperatorName”需要有 dll 接口由 class“c10::impl::OperatorEntry”的客户端使用
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\ATen\core\operator_name.h(14): message : 参见“c10::OperatorName”的声明
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\c10\util\Optional.h(184,1): warning C4624: “c10::constexpr_storage_t<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=c10::impl::AnnotatedSchema
          ]
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\c10\util\Optional.h(383): message : 查看对正在编译的 类 模板 实例化“c10::constexpr_storage_t<T>”的引用
          with
          [
              T=c10::impl::AnnotatedSchema
          ]
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\c10\util\Optional.h(526): message : 查看对正在编译的 类 模板 实例化“c10::trivially_copyable_optimization_optional_base<T>”的引用
          with
          [
              T=c10::impl::AnnotatedSchema
          ]
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\c10\util\Optional.h(526): message : 查看对正在编译的 别名 模板 实例化“c10::OptionalBase<c10::impl::AnnotatedSchema>”的引用
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\ATen\core\dispatch\OperatorEntry.h(193): message : 查看对正在编译的 类 模板 实例化“c10::optional<c10::impl::AnnotatedSchema>”的引用
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\c10\util\Optional.h(418,1): warning C4624: “c10::trivially_copyable_optimization_optional_base<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=c10::impl::AnnotatedSchema
          ]
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\ATen\core\dispatch\OperatorEntry.h(193,34): warning C4251: “c10::impl::OperatorEntry::schema_”: class“c10::optional<c10::impl::AnnotatedSchema>”需要有 dll 接口由 class“c10::impl::OperatorEntry”的客户端使用
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\ATen\core\dispatch\OperatorEntry.h(193): message : 参见“c10::optional<c10::impl::AnnotatedSchema>”的声明
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\ATen\core\dispatch\OperatorEntry.h(236,24): warning C4251: “c10::impl::OperatorEntry::kernels_”: class“ska::flat_hash_map<c10::DispatchKey,std::list<c10::impl::AnnotatedKernel,std::allocator<c10::impl::AnnotatedKernel>>,std::hash<c10::DispatchKey>,std::equal_to<K>,std::allocator<std::pair<K,V>>>”需要有 dll 接口由 class“c10::impl::OperatorEntry”的客户端使用
          with
          [
              K=c10::DispatchKey,
              V=std::list<c10::impl::AnnotatedKernel,std::allocator<c10::impl::AnnotatedKernel>>
          ]
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\ATen\core\dispatch\OperatorEntry.h(229): message : 参见“ska::flat_hash_map<c10::DispatchKey,std::list<c10::impl::AnnotatedKernel,std::allocator<c10::impl::AnnotatedKernel>>,std::hash<c10::DispatchKey>,std::equal_to<K>,std::allocator<std::pair<K,V>>>”的声明
          with
          [
              K=c10::DispatchKey,
              V=std::list<c10::impl::AnnotatedKernel,std::allocator<c10::impl::AnnotatedKernel>>
          ]
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\c10\util\Optional.h(184,1): warning C4624: “c10::constexpr_storage_t<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=c10::impl::OperatorEntry::CppSignatureWithDebug
          ]
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\c10\util\Optional.h(383): message : 查看对正在编译的 类 模板 实例化“c10::constexpr_storage_t<T>”的引用
          with
          [
              T=c10::impl::OperatorEntry::CppSignatureWithDebug
          ]
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\c10\util\Optional.h(526): message : 查看对正在编译的 类 模板 实例化“c10::trivially_copyable_optimization_optional_base<T>”的引用
          with
          [
              T=c10::impl::OperatorEntry::CppSignatureWithDebug
          ]
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\c10\util\Optional.h(526): message : 查看对正在编译的 别名 模板 实例化“c10::OptionalBase<c10::impl::OperatorEntry::CppSignatureWithDebug>”的引用
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\ATen\core\dispatch\OperatorEntry.h(252): message : 查看对正在编译的 类 模板 实例化“c10::optional<c10::impl::OperatorEntry::CppSignatureWithDebug>”的引用
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\c10\util\Optional.h(418,1): warning C4624: “c10::trivially_copyable_optimization_optional_base<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=c10::impl::OperatorEntry::CppSignatureWithDebug
          ]
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\ATen\core\dispatch\OperatorEntry.h(252,40): warning C4251: “c10::impl::OperatorEntry::cpp_signature_”: class“c10::optional<c10::impl::OperatorEntry::CppSignatureWithDebug>”需要有 dll 接口由 class“c10::impl::OperatorEntry”的客户端使用
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\ATen\core\dispatch\OperatorEntry.h(252): message : 参见“c10::optional<c10::impl::OperatorEntry::CppSignatureWithDebug>”的声明
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\ATen\record_function.h(77,32): warning C4251: “at::StringView::owned_str_ptr_”: class“std::shared_ptr<std::string>”需要有 dll 接口由 struct“at::StringView”的客户端使用
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\ATen\record_function.h(77): message : 参见“std::shared_ptr<std::string>”的声明
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\c10\util\Optional.h(184,1): warning C4624: “c10::constexpr_storage_t<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=c10::OperatorName
          ]
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\c10\util\Optional.h(383): message : 查看对正在编译的 类 模板 实例化“c10::constexpr_storage_t<T>”的引用
          with
          [
              T=c10::OperatorName
          ]
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\c10\util\Optional.h(526): message : 查看对正在编译的 类 模板 实例化“c10::trivially_copyable_optimization_optional_base<T>”的引用
          with
          [
              T=c10::OperatorName
          ]
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\c10\util\Optional.h(526): message : 查看对正在编译的 别名 模板 实例化“c10::OptionalBase<c10::OperatorName>”的引用
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\ATen\record_function.h(320): message : 查看对正在编译的 类 模板 实例化“c10::optional<c10::OperatorName>”的引用
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\c10\util\Optional.h(418,1): warning C4624: “c10::trivially_copyable_optimization_optional_base<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=c10::OperatorName
          ]
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\ATen\record_function.h(349,26): warning C4251: “at::RecordFunction::state_”: class“std::unique_ptr<at::RecordFunction::State,std::default_delete<at::RecordFunction::State>>”需要有 dll 接口由 struct“at::RecordFunction”的客户端使用
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\ATen\record_function.h(349): message : 参见“std::unique_ptr<at::RecordFunction::State,std::default_delete<at::RecordFunction::State>>”的声明
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\ATen\record_function.h(729,38): warning C4251: “at::RecordFunctionTLS::sorted_tls_callbacks_”: class“std::vector<at::ThreadLocalRecordFunctionCallbacksEntry,std::allocator<at::ThreadLocalRecordFunctionCallbacksEntry>>”需要有 dll 接口由 struct“at::RecordFunctionTLS”的客户端使用
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\ATen\record_function.h(628): message : 参见“std::vector<at::ThreadLocalRecordFunctionCallbacksEntry,std::allocator<at::ThreadLocalRecordFunctionCallbacksEntry>>”的声明
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\ATen\core\dispatch\Dispatcher.h(278,26): warning C4251: “c10::Dispatcher::operators_”: class“std::list<c10::Dispatcher::OperatorDef,std::allocator<c10::Dispatcher::OperatorDef>>”需要有 dll 接口由 class“c10::Dispatcher”的客户端使用
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\ATen\core\dispatch\Dispatcher.h(278): message : 参见“std::list<c10::Dispatcher::OperatorDef,std::allocator<c10::Dispatcher::OperatorDef>>”的声明
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\ATen\core\dispatch\Dispatcher.h(279,63): warning C4251: “c10::Dispatcher::operatorLookupTable_”: class“c10::LeftRight<ska::flat_hash_map<c10::OperatorName,c10::OperatorHandle,std::hash<c10::OperatorName>,std::equal_to<K>,std::allocator<std::pair<K,V>>>>”需要有 dll 接口由 class“c10::Dispatcher”的客户端使用
          with
          [
              K=c10::OperatorName,
              V=c10::OperatorHandle
          ]
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\ATen\core\dispatch\Dispatcher.h(279): message : 参见“c10::LeftRight<ska::flat_hash_map<c10::OperatorName,c10::OperatorHandle,std::hash<c10::OperatorName>,std::equal_to<K>,std::allocator<std::pair<K,V>>>>”的声明
          with
          [
              K=c10::OperatorName,
              V=c10::OperatorHandle
          ]
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\ATen\core\dispatch\Dispatcher.h(281,48): warning C4251: “c10::Dispatcher::libraries_”: class“ska::flat_hash_map<std::string,std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::pair<K,V>>>”需要有 dll 接口由 class“c10::Dispatcher”的客户端使用
          with
          [
              K=std::string,
              V=std::string
          ]
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\ATen\core\dispatch\Dispatcher.h(281): message : 参见“ska::flat_hash_map<std::string,std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::pair<K,V>>>”的声明
          with
          [
              K=std::string,
              V=std::string
          ]
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\ATen\core\dispatch\Dispatcher.h(285,53): warning C4251: “c10::Dispatcher::listeners_”: class“std::unique_ptr<c10::detail::RegistrationListenerList,std::default_delete<c10::detail::RegistrationListenerList>>”需要有 dll 接口由 class“c10::Dispatcher”的客户端使用
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\ATen\core\dispatch\Dispatcher.h(285): message : 参见“std::unique_ptr<c10::detail::RegistrationListenerList,std::default_delete<c10::detail::RegistrationListenerList>>”的声明
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\ATen\core\dispatch\Dispatcher.h(286,14): warning C4251: “c10::Dispatcher::mutex_”: class“std::mutex”需要有 dll 接口由 class“c10::Dispatcher”的客户端使用
C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.29.30133\include\mutex(86): message : 参见“std::mutex”的声明
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\ATen\core\dispatch\Dispatcher.h(374,48): warning C4251: “c10::OperatorHandle::operatorIterator_”: class“std::_List_iterator<std::_List_val<std::_List_simple_types<_Ty>>>”需要有 dll 接口由 class“c10::OperatorHandle”的客户端使用
          with
          [
              _Ty=c10::Dispatcher::OperatorDef
          ]
C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.29.30133\include\list(787): message : 参见“std::_List_iterator<std::_List_val<std::_List_simple_types<_Ty>>>”的声明
          with
          [
              _Ty=c10::Dispatcher::OperatorDef
          ]
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\c10\util\Optional.h(184,1): warning C4624: “c10::constexpr_storage_t<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=c10::either<c10::OperatorName,c10::FunctionSchema>
          ]
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\c10\util\Optional.h(383): message : 查看对正在编译的 类 模板 实例化“c10::constexpr_storage_t<T>”的引用
          with
          [
              T=c10::either<c10::OperatorName,c10::FunctionSchema>
          ]
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\c10\util\Optional.h(526): message : 查看对正在编译的 类 模板 实例化“c10::trivially_copyable_optimization_optional_base<T>”的引用
          with
          [
              T=c10::either<c10::OperatorName,c10::FunctionSchema>
          ]
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\c10\util\Optional.h(526): message : 查看对正在编译的 别名 模板 实例化“c10::OptionalBase<c10::either<c10::OperatorName,c10::FunctionSchema>>”的引用
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\ATen\core\op_registration\op_registration.h(434): message : 查看对正在编译的 类 模板 实例化“c10::optional<c10::either<c10::OperatorName,c10::FunctionSchema>>”的引用
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\c10\util\Optional.h(418,1): warning C4624: “c10::trivially_copyable_optimization_optional_base<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=c10::either<c10::OperatorName,c10::FunctionSchema>
          ]
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\ATen\core\op_registration\op_registration.h(434,62): warning C4251: “c10::RegisterOperators::Options::schemaOrName_”: class“c10::optional<c10::either<c10::OperatorName,c10::FunctionSchema>>”需要有 dll 接口由 class“c10::RegisterOperators::Options”的客户端使用
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\ATen\core\op_registration\op_registration.h(434): message : 参见“c10::optional<c10::either<c10::OperatorName,c10::FunctionSchema>>”的声明
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\ATen\core\op_registration\op_registration.h(436,43): warning C4251: “c10::RegisterOperators::Options::kernels”: class“std::vector<c10::RegisterOperators::Options::KernelRegistrationConfig,std::allocator<c10::RegisterOperators::Options::KernelRegistrationConfig>>”需要有 dll 接口由 class“c10::RegisterOperators::Options”的客户端使用
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\ATen\core\op_registration\op_registration.h(436): message : 参见“std::vector<c10::RegisterOperators::Options::KernelRegistrationConfig,std::allocator<c10::RegisterOperators::Options::KernelRegistrationConfig>>”的声明
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\ATen\core\op_registration\op_registration.h(437,33): warning C4251: “c10::RegisterOperators::Options::aliasAnalysisKind_”: class“c10::optional<c10::AliasAnalysisKind>”需要有 dll 接口由 class“c10::RegisterOperators::Options”的客户端使用
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\ATen\core\function_schema.h(218): message : 参见“c10::optional<c10::AliasAnalysisKind>”的声明
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\ATen\core\op_registration\op_registration.h(588,39): warning C4251: “c10::RegisterOperators::registrars_”: class“std::vector<c10::RegistrationHandleRAII,std::allocator<c10::RegistrationHandleRAII>>”需要有 dll 接口由 class“c10::RegisterOperators”的客户端使用
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\ATen\core\op_registration\op_registration.h(588): message : 参见“std::vector<c10::RegistrationHandleRAII,std::allocator<c10::RegistrationHandleRAII>>”的声明
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\torch\library.h(256,35): warning C4251: “torch::CppFunction::dispatch_key_”: class“c10::optional<c10::DispatchKey>”需要有 dll 接口由 class“torch::CppFunction”的客户端使用
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\ATen\core\dispatch\OperatorEntry.h(130): message : 参见“c10::optional<c10::DispatchKey>”的声明
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\torch\library.h(258,42): warning C4251: “torch::CppFunction::cpp_signature_”: class“c10::optional<c10::impl::CppSignature>”需要有 dll 接口由 class“torch::CppFunction”的客户端使用
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\ATen\core\dispatch\OperatorEntry.h(132): message : 参见“c10::optional<c10::impl::CppSignature>”的声明
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\torch\library.h(259,40): warning C4251: “torch::CppFunction::schema_”: class“std::unique_ptr<c10::FunctionSchema,std::default_delete<c10::FunctionSchema>>”需要有 dll 接口由 class“torch::CppFunction”的客户端使用
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\ATen\core\dispatch\OperatorEntry.h(36): message : 参见“std::unique_ptr<c10::FunctionSchema,std::default_delete<c10::FunctionSchema>>”的声明
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\torch\library.h(260,15): warning C4251: “torch::CppFunction::debug_”: class“std::basic_string<char,std::char_traits<char>,std::allocator<char>>”需要有 dll 接口由 class“torch::CppFunction”的客户端使用
C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.29.30133\include\xstring(4871): message : 参见“std::basic_string<char,std::char_traits<char>,std::allocator<char>>”的声明
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\torch\library.h(686,30): warning C4251: “torch::Library::ns_”: class“c10::optional<std::string>”需要有 dll 接口由 class“torch::Library”的客户端使用
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\ATen\core\List.h(65): message : 参见“c10::optional<std::string>”的声明
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\torch\library.h(687,35): warning C4251: “torch::Library::dispatch_key_”: class“c10::optional<c10::DispatchKey>”需要有 dll 接口由 class“torch::Library”的客户端使用
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\ATen\core\dispatch\OperatorEntry.h(130): message : 参见“c10::optional<c10::DispatchKey>”的声明
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\torch\library.h(691,44): warning C4251: “torch::Library::registrars_”: class“std::vector<c10::RegistrationHandleRAII,std::allocator<c10::RegistrationHandleRAII>>”需要有 dll 接口由 class“torch::Library”的客户端使用
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\ATen\core\op_registration\op_registration.h(588): message : 参见“std::vector<c10::RegistrationHandleRAII,std::allocator<c10::RegistrationHandleRAII>>”的声明
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\torch\custom_class_detail.h(182,15): warning C4251: “torch::detail::class_base::qualClassName”: class“std::basic_string<char,std::char_traits<char>,std::allocator<char>>”需要有 dll 接口由 class“torch::detail::class_base”的客户端使用
C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.29.30133\include\xstring(4871): message : 参见“std::basic_string<char,std::char_traits<char>,std::allocator<char>>”的声明
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\torch\custom_class_detail.h(183,20): warning C4251: “torch::detail::class_base::classTypePtr”: class“std::shared_ptr<c10::ClassType>”需要有 dll 接口由 class“torch::detail::class_base”的客户端使用
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\ATen\core\ivalue.h(32): message : 参见“std::shared_ptr<c10::ClassType>”的声明
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\torch\csrc\jit\runtime\operator.h(184,45): warning C4251: “torch::jit::Operator::op_”: class“c10::either<torch::jit::Operator::C10Operator,torch::jit::Operator::JitOnlyOperator>”需要有 dll 接口由 struct“torch::jit::Operator”的客户端使用
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\torch\csrc\jit\runtime\operator.h(184): message : 参见“c10::either<torch::jit::Operator::C10Operator,torch::jit::Operator::JitOnlyOperator>”的声明
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\torch\csrc\jit\ir\ir.h(320,23): warning C4251: “torch::jit::Node::inputs_”: class“std::vector<torch::jit::Value *,std::allocator<torch::jit::Value *>>”需要有 dll 接口由 struct“torch::jit::Node”的客户端使用
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\torch\csrc\jit\ir\ir.h(146): message : 参见“std::vector<torch::jit::Value *,std::allocator<torch::jit::Value *>>”的声明
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\torch\csrc\jit\ir\ir.h(321,23): warning C4251: “torch::jit::Node::outputs_”: class“std::vector<torch::jit::Value *,std::allocator<torch::jit::Value *>>”需要有 dll 接口由 struct“torch::jit::Node”的客户端使用
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\torch\csrc\jit\ir\ir.h(146): message : 参见“std::vector<torch::jit::Value *,std::allocator<torch::jit::Value *>>”的声明
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\torch\csrc\jit\ir\ir.h(323,23): warning C4251: “torch::jit::Node::blocks_”: class“std::vector<torch::jit::Block *,std::allocator<torch::jit::Block *>>”需要有 dll 接口由 struct“torch::jit::Node”的客户端使用
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\torch\csrc\jit\ir\ir.h(323): message : 参见“std::vector<torch::jit::Block *,std::allocator<torch::jit::Block *>>”的声明
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\torch\csrc\jit\ir\ir.h(326,30): warning C4251: “torch::jit::Node::source_range_”: class“c10::optional<torch::jit::SourceRange>”需要有 dll 接口由 struct“torch::jit::Node”的客户端使用
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\torch\csrc\jit\frontend\source_range.h(86): message : 参见“c10::optional<torch::jit::SourceRange>”的声明
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\torch\csrc\jit\ir\ir.h(327,12): warning C4251: “torch::jit::Node::scope_”: class“c10::intrusive_ptr<torch::jit::Scope,c10::detail::intrusive_target_default_null_type<TTarget>>”需要有 dll 接口由 struct“torch::jit::Node”的客户端使用
          with
          [
              TTarget=torch::jit::Scope
          ]
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\torch\csrc\jit\ir\scope.h(27): message : 参见“c10::intrusive_ptr<torch::jit::Scope,c10::detail::intrusive_target_default_null_type<TTarget>>”的声明
          with
          [
              TTarget=torch::jit::Scope
          ]
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\torch\csrc\jit\ir\ir.h(328,38): warning C4251: “torch::jit::Node::callstack_”: class“c10::optional<torch::jit::InlinedCallStackPtr>”需要有 dll 接口由 struct“torch::jit::Node”的客户端使用
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\torch\csrc\jit\ir\scope.h(127): message : 参见“c10::optional<torch::jit::InlinedCallStackPtr>”的声明
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\torch\csrc\jit\ir\ir.h(336,31): warning C4251: “torch::jit::Node::wrap_”: class“std::shared_ptr<torch::jit::Wrap<torch::jit::Node>>”需要有 dll 接口由 struct“torch::jit::Node”的客户端使用
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\torch\csrc\jit\ir\ir.h(336): message : 参见“std::shared_ptr<torch::jit::Wrap<torch::jit::Node>>”的声明
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\torch\csrc\jit\ir\ir.h(922,22): warning C4251: “torch::jit::Node::values_”: class“std::vector<torch::jit::Node::AVPtr,std::allocator<torch::jit::Node::AVPtr>>”需要有 dll 接口由 struct“torch::jit::Node”的客户端使用
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\torch\csrc\jit\ir\ir.h(922): message : 参见“std::vector<torch::jit::Node::AVPtr,std::allocator<torch::jit::Node::AVPtr>>”的声明
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\torch\csrc\jit\ir\ir.h(1491,45): warning C4251: “torch::jit::ProfileIValueOp::callback_”: class“std::function<void (torch::jit::Stack &)>”需要有 dll 接口由 struct“torch::jit::ProfileIValueOp”的客户端使用
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\ATen\core\stack.h(18): message : 参见“std::function<void (torch::jit::Stack &)>”的声明
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\torch\csrc\jit\runtime\argument_spec.h(205,21): warning C4251: “torch::jit::ArgumentSpecCreator::instructions_”: class“std::vector<torch::jit::ArgumentSpecCreator::Inst,std::allocator<torch::jit::ArgumentSpecCreator::Inst>>”需要有 dll 接口由 struct“torch::jit::ArgumentSpecCreator”的客户端使用
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\torch\csrc\jit\runtime\argument_spec.h(205): message : 参见“std::vector<torch::jit::ArgumentSpecCreator::Inst,std::allocator<torch::jit::ArgumentSpecCreator::Inst>>”的声明
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\torch\csrc\jit\runtime\argument_spec.h(245,1): warning C4267: “初始化”: 从“size_t”转换到“int32_t”，可能丢失数据
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\torch\csrc\jit\runtime\argument_spec.h(245,1): warning C4267: “初始化”: 从“size_t”转换到“const int32_t”，可能丢失数据
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\torch\csrc\jit\runtime\argument_spec.h(250,1): warning C4244: “+=”: 从“int64_t”转换到“int32_t”，可能丢失数据
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\torch\csrc\jit\runtime\argument_spec.h(276,1): warning C4244: “+=”: 从“int64_t”转换到“int32_t”，可能丢失数据
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\torch\csrc\jit\runtime\argument_spec.h(455,39): warning C4267: “参数”: 从“size_t”转换到“const int”，可能丢失数据
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\ATen\ThreadLocalState.h(36,46): warning C4251: “at::ThreadLocalState::debug_info_”: class“std::shared_ptr<c10::ThreadLocalDebugInfo>”需要有 dll 接口由 class“at::ThreadLocalState”的客户端使用
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\c10\util\ThreadLocalDebugInfo.h(40): message : 参见“std::shared_ptr<c10::ThreadLocalDebugInfo>”的声明
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\ATen\ThreadLocalState.h(44,44): warning C4251: “at::ThreadLocalState::python_mode_state_”: class“std::shared_ptr<c10::TorchDispatchTypeObject>”需要有 dll 接口由 class“at::ThreadLocalState”的客户端使用
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\c10\core\TensorImpl.h(263): message : 参见“std::shared_ptr<c10::TorchDispatchTypeObject>”的声明
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\ATen\ThreadLocalState.h(47,35): warning C4251: “at::ThreadLocalState::saved_tensors_default_hooks_”: struct“std::pair<PyObject *,PyObject *>”需要有 dll 接口由 class“at::ThreadLocalState”的客户端使用
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\ATen\ThreadLocalState.h(47): message : 参见“std::pair<PyObject *,PyObject *>”的声明
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\torch\csrc\jit\runtime\interpreter.h(75,42): warning C4251: “torch::jit::Code::pImpl”: class“std::shared_ptr<torch::jit::interpreter::CodeImpl>”需要有 dll 接口由 struct“torch::jit::Code”的客户端使用
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\torch\csrc\jit\runtime\interpreter.h(75): message : 参见“std::shared_ptr<torch::jit::interpreter::CodeImpl>”的声明
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\c10\util\Optional.h(184,1): warning C4624: “c10::constexpr_storage_t<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=at::ThreadLocalState
          ]
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\c10\util\Optional.h(383): message : 查看对正在编译的 类 模板 实例化“c10::constexpr_storage_t<T>”的引用
          with
          [
              T=at::ThreadLocalState
          ]
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\c10\util\Optional.h(526): message : 查看对正在编译的 类 模板 实例化“c10::trivially_copyable_optimization_optional_base<T>”的引用
          with
          [
              T=at::ThreadLocalState
          ]
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\c10\util\Optional.h(526): message : 查看对正在编译的 别名 模板 实例化“c10::OptionalBase<at::ThreadLocalState>”的引用
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\torch\csrc\jit\runtime\interpreter.h(144): message : 查看对正在编译的 类 模板 实例化“c10::optional<at::ThreadLocalState>”的引用
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\c10\util\Optional.h(418,1): warning C4624: “c10::trivially_copyable_optimization_optional_base<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=at::ThreadLocalState
          ]
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\torch\csrc\jit\runtime\graph_executor.h(92,42): warning C4251: “torch::jit::GraphExecutor::pImpl”: class“std::shared_ptr<torch::jit::GraphExecutorImplBase>”需要有 dll 接口由 struct“torch::jit::GraphExecutor”的客户端使用
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\torch\csrc\jit\runtime\graph_executor.h(92): message : 参见“std::shared_ptr<torch::jit::GraphExecutorImplBase>”的声明
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\torch\csrc\jit\api\function_impl.h(118,22): warning C4251: “torch::jit::GraphFunction::name_”: struct“c10::QualifiedName”需要有 dll 接口由 struct“torch::jit::GraphFunction”的客户端使用
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\ATen\core\qualified_name.h(11): message : 参见“c10::QualifiedName”的声明
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\torch\csrc\jit\api\function_impl.h(120,26): warning C4251: “torch::jit::GraphFunction::graph_”: class“std::shared_ptr<torch::jit::Graph>”需要有 dll 接口由 struct“torch::jit::GraphFunction”的客户端使用
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\ATen\core\function.h(26): message : 参见“std::shared_ptr<torch::jit::Graph>”的声明
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\c10\util\Optional.h(184,1): warning C4624: “c10::constexpr_storage_t<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=std::shared_ptr<torch::jit::Graph>
          ]
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\c10\util\Optional.h(383): message : 查看对正在编译的 类 模板 实例化“c10::constexpr_storage_t<T>”的引用
          with
          [
              T=std::shared_ptr<torch::jit::Graph>
          ]
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\c10\util\Optional.h(526): message : 查看对正在编译的 类 模板 实例化“c10::trivially_copyable_optimization_optional_base<T>”的引用
          with
          [
              T=std::shared_ptr<torch::jit::Graph>
          ]
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\c10\util\Optional.h(526): message : 查看对正在编译的 别名 模板 实例化“c10::OptionalBase<std::shared_ptr<torch::jit::Graph>>”的引用
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\torch\csrc\jit\api\function_impl.h(125): message : 查看对正在编译的 类 模板 实例化“c10::optional<std::shared_ptr<torch::jit::Graph>>”的引用
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\c10\util\Optional.h(418,1): warning C4624: “c10::trivially_copyable_optimization_optional_base<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=std::shared_ptr<torch::jit::Graph>
          ]
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\torch\csrc\jit\api\function_impl.h(125,49): warning C4251: “torch::jit::GraphFunction::optimized_graph_”: class“c10::optional<std::shared_ptr<torch::jit::Graph>>”需要有 dll 接口由 struct“torch::jit::GraphFunction”的客户端使用
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\torch\csrc\jit\api\function_impl.h(125): message : 参见“c10::optional<std::shared_ptr<torch::jit::Graph>>”的声明
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\torch\csrc\jit\api\function_impl.h(132,32): warning C4251: “torch::jit::GraphFunction::compile_mutex”: class“std::recursive_mutex”需要有 dll 接口由 struct“torch::jit::GraphFunction”的客户端使用
C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.29.30133\include\mutex(95): message : 参见“std::recursive_mutex”的声明
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\torch\csrc\jit\api\function_impl.h(139,39): warning C4251: “torch::jit::GraphFunction::function_creator_”: class“std::function<void (torch::jit::GraphFunction &)>”需要有 dll 接口由 struct“torch::jit::GraphFunction”的客户端使用
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\torch\csrc\jit\api\function_impl.h(16): message : 参见“std::function<void (torch::jit::GraphFunction &)>”的声明
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\torch\csrc\jit\api\function_impl.h(144,43): warning C4251: “torch::jit::GraphFunction::schema_”: class“std::unique_ptr<c10::FunctionSchema,std::default_delete<c10::FunctionSchema>>”需要有 dll 接口由 struct“torch::jit::GraphFunction”的客户端使用
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\ATen\core\dispatch\OperatorEntry.h(36): message : 参见“std::unique_ptr<c10::FunctionSchema,std::default_delete<c10::FunctionSchema>>”的声明
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\torch\csrc\jit\api\method.h(70,13): warning C4251: “torch::jit::Method::owner_”: class“c10::intrusive_ptr<c10::ivalue::Object,c10::detail::intrusive_target_default_null_type<TTarget>>”需要有 dll 接口由 struct“torch::jit::Method”的客户端使用
          with
          [
              TTarget=c10::ivalue::Object
          ]
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\ATen\core\ivalue.h(642): message : 参见“c10::intrusive_ptr<c10::ivalue::Object,c10::detail::intrusive_target_default_null_type<TTarget>>”的声明
          with
          [
              TTarget=c10::ivalue::Object
          ]
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\c10\util\Optional.h(184,1): warning C4624: “c10::constexpr_storage_t<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=torch::jit::Method
          ]
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\c10\util\Optional.h(383): message : 查看对正在编译的 类 模板 实例化“c10::constexpr_storage_t<T>”的引用
          with
          [
              T=torch::jit::Method
          ]
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\c10\util\Optional.h(526): message : 查看对正在编译的 类 模板 实例化“c10::trivially_copyable_optimization_optional_base<T>”的引用
          with
          [
              T=torch::jit::Method
          ]
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\c10\util\Optional.h(526): message : 查看对正在编译的 别名 模板 实例化“c10::OptionalBase<torch::jit::Method>”的引用
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\torch\csrc\jit\api\object.h(43): message : 查看对正在编译的 类 模板 实例化“c10::optional<torch::jit::Method>”的引用
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\c10\util\Optional.h(418,1): warning C4624: “c10::trivially_copyable_optimization_optional_base<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=torch::jit::Method
          ]
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\torch\csrc\jit\api\object.h(182,21): warning C4251: “torch::jit::Object::_ivalue_”: class“c10::intrusive_ptr<c10::ivalue::Object,c10::detail::intrusive_target_default_null_type<TTarget>>”需要有 dll 接口由 struct“torch::jit::Object”的客户端使用
          with
          [
              TTarget=c10::ivalue::Object
          ]
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\ATen\core\ivalue.h(642): message : 参见“c10::intrusive_ptr<c10::ivalue::Object,c10::detail::intrusive_target_default_null_type<TTarget>>”的声明
          with
          [
              TTarget=c10::ivalue::Object
          ]
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\torch\csrc\jit\frontend\tracer.h(43,57): warning C4251: “std::enable_shared_from_this<torch::jit::tracer::TracingState>::_Wptr”: class“std::weak_ptr<_Ty>”需要有 dll 接口由 class“std::enable_shared_from_this<torch::jit::tracer::TracingState>”的客户端使用
          with
          [
              _Ty=torch::jit::tracer::TracingState
          ]
C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.29.30133\include\memory(3052): message : 参见“std::weak_ptr<_Ty>”的声明
          with
          [
              _Ty=torch::jit::tracer::TracingState
          ]
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\torch\csrc\jit\frontend\tracer.h(48,26): warning C4251: “torch::jit::tracer::TracingState::graph”: class“std::shared_ptr<torch::jit::Graph>”需要有 dll 接口由 struct“torch::jit::tracer::TracingState”的客户端使用
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\ATen\core\function.h(26): message : 参见“std::shared_ptr<torch::jit::Graph>”的声明
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\torch\csrc\jit\frontend\tracer.h(56,51): warning C4251: “torch::jit::tracer::TracingState::lookup_var_name_fn”: class“std::function<std::string (const torch::autograd::Variable &)>”需要有 dll 接口由 struct“torch::jit::tracer::TracingState”的客户端使用
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\torch\csrc\jit\frontend\tracer.h(56): message : 参见“std::function<std::string (const torch::autograd::Variable &)>”的声明
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\torch\csrc\jit\frontend\tracer.h(90,22): warning C4251: “torch::jit::tracer::TracingState::env_stack”: class“std::vector<torch::jit::tracer::TracingState::Frame,std::allocator<torch::jit::tracer::TracingState::Frame>>”需要有 dll 接口由 struct“torch::jit::tracer::TracingState”的客户端使用
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\torch\csrc\jit\frontend\tracer.h(90): message : 参见“std::vector<torch::jit::tracer::TracingState::Frame,std::allocator<torch::jit::tracer::TracingState::Frame>>”的声明
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\torch\csrc\jit\frontend\tracer.h(188,33): warning C4251: “torch::jit::tracer::NoWarn::state”: class“std::shared_ptr<_Ty>”需要有 dll 接口由 struct“torch::jit::tracer::NoWarn”的客户端使用
          with
          [
              _Ty=torch::jit::tracer::TracingState
          ]
C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.29.30133\include\memory(3044): message : 参见“std::shared_ptr<_Ty>”的声明
          with
          [
              _Ty=torch::jit::tracer::TracingState
          ]
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\c10\util\Optional.h(184,1): warning C4624: “c10::constexpr_storage_t<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=torch::jit::Operator
          ]
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\c10\util\Optional.h(383): message : 查看对正在编译的 类 模板 实例化“c10::constexpr_storage_t<T>”的引用
          with
          [
              T=torch::jit::Operator
          ]
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\c10\util\Optional.h(526): message : 查看对正在编译的 类 模板 实例化“c10::trivially_copyable_optimization_optional_base<T>”的引用
          with
          [
              T=torch::jit::Operator
          ]
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\c10\util\Optional.h(526): message : 查看对正在编译的 别名 模板 实例化“c10::OptionalBase<torch::jit::Operator>”的引用
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\torch\csrc\jit\runtime\custom_operator.h(23): message : 查看对正在编译的 类 模板 实例化“c10::optional<torch::jit::Operator>”的引用
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\c10\util\Optional.h(418,1): warning C4624: “c10::trivially_copyable_optimization_optional_base<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=torch::jit::Operator
          ]
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\caffe2\serialize\inline_container.h(121,35): warning C4251: “caffe2::serialize::PyTorchStreamReader::ar_”: class“std::unique_ptr<mz_zip_archive,std::default_delete<mz_zip_archive>>”需要有 dll 接口由 class“caffe2::serialize::PyTorchStreamReader”的客户端使用
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\caffe2\serialize\inline_container.h(121): message : 参见“std::unique_ptr<mz_zip_archive,std::default_delete<mz_zip_archive>>”的声明
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\caffe2\serialize\inline_container.h(122,15): warning C4251: “caffe2::serialize::PyTorchStreamReader::archive_name_”: class“std::basic_string<char,std::char_traits<char>,std::allocator<char>>”需要有 dll 接口由 class“caffe2::serialize::PyTorchStreamReader”的客户端使用
C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.29.30133\include\xstring(4871): message : 参见“std::basic_string<char,std::char_traits<char>,std::allocator<char>>”的声明
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\caffe2\serialize\inline_container.h(123,15): warning C4251: “caffe2::serialize::PyTorchStreamReader::archive_name_plus_slash_”: class“std::basic_string<char,std::char_traits<char>,std::allocator<char>>”需要有 dll 接口由 class“caffe2::serialize::PyTorchStreamReader”的客户端使用
C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.29.30133\include\xstring(4871): message : 参见“std::basic_string<char,std::char_traits<char>,std::allocator<char>>”的声明
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\caffe2\serialize\inline_container.h(124,41): warning C4251: “caffe2::serialize::PyTorchStreamReader::in_”: class“std::shared_ptr<caffe2::serialize::ReadAdapterInterface>”需要有 dll 接口由 class“caffe2::serialize::PyTorchStreamReader”的客户端使用
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\caffe2\serialize\inline_container.h(100): message : 参见“std::shared_ptr<caffe2::serialize::ReadAdapterInterface>”的声明
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\caffe2\serialize\inline_container.h(126,14): warning C4251: “caffe2::serialize::PyTorchStreamReader::reader_lock_”: class“std::mutex”需要有 dll 接口由 class“caffe2::serialize::PyTorchStreamReader”的客户端使用
C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.29.30133\include\mutex(86): message : 参见“std::mutex”的声明
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\caffe2\serialize\inline_container.h(160,35): warning C4251: “caffe2::serialize::PyTorchStreamWriter::files_written_”: class“std::unordered_set<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>”需要有 dll 接口由 class“caffe2::serialize::PyTorchStreamWriter”的客户端使用
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\torch\csrc\jit\runtime\argument_spec.h(195): message : 参见“std::unordered_set<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>”的声明
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\caffe2\serialize\inline_container.h(161,35): warning C4251: “caffe2::serialize::PyTorchStreamWriter::ar_”: class“std::unique_ptr<mz_zip_archive,std::default_delete<mz_zip_archive>>”需要有 dll 接口由 class“caffe2::serialize::PyTorchStreamWriter”的客户端使用
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\caffe2\serialize\inline_container.h(121): message : 参见“std::unique_ptr<mz_zip_archive,std::default_delete<mz_zip_archive>>”的声明
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\caffe2\serialize\inline_container.h(162,15): warning C4251: “caffe2::serialize::PyTorchStreamWriter::archive_name_”: class“std::basic_string<char,std::char_traits<char>,std::allocator<char>>”需要有 dll 接口由 class“caffe2::serialize::PyTorchStreamWriter”的客户端使用
C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.29.30133\include\xstring(4871): message : 参见“std::basic_string<char,std::char_traits<char>,std::allocator<char>>”的声明
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\caffe2\serialize\inline_container.h(163,15): warning C4251: “caffe2::serialize::PyTorchStreamWriter::archive_name_plus_slash_”: class“std::basic_string<char,std::char_traits<char>,std::allocator<char>>”需要有 dll 接口由 class“caffe2::serialize::PyTorchStreamWriter”的客户端使用
C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.29.30133\include\xstring(4871): message : 参见“std::basic_string<char,std::char_traits<char>,std::allocator<char>>”的声明
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\caffe2\serialize\inline_container.h(164,15): warning C4251: “caffe2::serialize::PyTorchStreamWriter::padding_”: class“std::basic_string<char,std::char_traits<char>,std::allocator<char>>”需要有 dll 接口由 class“caffe2::serialize::PyTorchStreamWriter”的客户端使用
C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.29.30133\include\xstring(4871): message : 参见“std::basic_string<char,std::char_traits<char>,std::allocator<char>>”的声明
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\caffe2\serialize\inline_container.h(165,17): warning C4251: “caffe2::serialize::PyTorchStreamWriter::file_stream_”: class“std::basic_ofstream<char,std::char_traits<char>>”需要有 dll 接口由 class“caffe2::serialize::PyTorchStreamWriter”的客户端使用
C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.29.30133\include\iosfwd(229): message : 参见“std::basic_ofstream<char,std::char_traits<char>>”的声明
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\caffe2\serialize\inline_container.h(166,46): warning C4251: “caffe2::serialize::PyTorchStreamWriter::writer_func_”: class“std::function<size_t (const void *,size_t)>”需要有 dll 接口由 class“caffe2::serialize::PyTorchStreamWriter”的客户端使用
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\caffe2\serialize\inline_container.h(133): message : 参见“std::function<size_t (const void *,size_t)>”的声明
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\torch\csrc\jit\api\compilation_unit.h(317,42): warning C4251: “torch::jit::CompilationUnit::functions_”: class“std::vector<std::unique_ptr<torch::jit::Function,std::default_delete<torch::jit::Function>>,std::allocator<std::unique_ptr<torch::jit::Function,std::default_delete<torch::jit::Function>>>>”需要有 dll 接口由 struct“torch::jit::CompilationUnit”的客户端使用
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\torch\csrc\jit\api\compilation_unit.h(317): message : 参见“std::vector<std::unique_ptr<torch::jit::Function,std::default_delete<torch::jit::Function>>,std::allocator<std::unique_ptr<torch::jit::Function,std::default_delete<torch::jit::Function>>>>”的声明
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\torch\csrc\jit\api\compilation_unit.h(319,50): warning C4251: “torch::jit::CompilationUnit::dict_”: class“std::unordered_map<c10::QualifiedName,size_t,std::hash<c10::QualifiedName>,std::equal_to<c10::QualifiedName>,std::allocator<std::pair<const c10::QualifiedName,size_t>>>”需要有 dll 接口由 struct“torch::jit::CompilationUnit”的客户端使用
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\torch\csrc\jit\api\compilation_unit.h(319): message : 参见“std::unordered_map<c10::QualifiedName,size_t,std::hash<c10::QualifiedName>,std::equal_to<c10::QualifiedName>,std::allocator<std::pair<const c10::QualifiedName,size_t>>>”的声明
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\torch\csrc\jit\api\compilation_unit.h(320,50): warning C4251: “torch::jit::CompilationUnit::classDict_”: class“std::unordered_map<c10::QualifiedName,size_t,std::hash<c10::QualifiedName>,std::equal_to<c10::QualifiedName>,std::allocator<std::pair<const c10::QualifiedName,size_t>>>”需要有 dll 接口由 struct“torch::jit::CompilationUnit”的客户端使用
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\torch\csrc\jit\api\compilation_unit.h(319): message : 参见“std::unordered_map<c10::QualifiedName,size_t,std::hash<c10::QualifiedName>,std::equal_to<c10::QualifiedName>,std::allocator<std::pair<const c10::QualifiedName,size_t>>>”的声明
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\torch\csrc\jit\api\compilation_unit.h(327,34): warning C4251: “torch::jit::CompilationUnit::classes_”: class“std::vector<c10::NamedTypePtr,std::allocator<c10::NamedTypePtr>>”需要有 dll 接口由 struct“torch::jit::CompilationUnit”的客户端使用
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\torch\csrc\jit\api\compilation_unit.h(327): message : 参见“std::vector<c10::NamedTypePtr,std::allocator<c10::NamedTypePtr>>”的声明
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\c10\util\Optional.h(184,1): warning C4624: “c10::constexpr_storage_t<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=std::vector<std::string,std::allocator<std::string>>
          ]
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\c10\util\Optional.h(383): message : 查看对正在编译的 类 模板 实例化“c10::constexpr_storage_t<T>”的引用
          with
          [
              T=std::vector<std::string,std::allocator<std::string>>
          ]
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\c10\util\Optional.h(526): message : 查看对正在编译的 类 模板 实例化“c10::trivially_copyable_optimization_optional_base<T>”的引用
          with
          [
              T=std::vector<std::string,std::allocator<std::string>>
          ]
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\c10\util\Optional.h(526): message : 查看对正在编译的 别名 模板 实例化“c10::OptionalBase<std::vector<std::string,std::allocator<std::string>>>”的引用
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\torch\csrc\jit\api\module.h(296): message : 查看对正在编译的 类 模板 实例化“c10::optional<std::vector<std::string,std::allocator<std::string>>>”的引用
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\c10\util\Optional.h(418,1): warning C4624: “c10::trivially_copyable_optimization_optional_base<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=std::vector<std::string,std::allocator<std::string>>
          ]
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\torch\csrc\jit\serialization\pickler.h(233,44): warning C4251: “torch::jit::Pickler::writer_”: class“std::function<void (const char *,size_t)>”需要有 dll 接口由 class“torch::jit::Pickler”的客户端使用
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\torch\csrc\jit\serialization\pickler.h(124): message : 参见“std::function<void (const char *,size_t)>”的声明
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\torch\csrc\jit\serialization\pickler.h(240,21): warning C4251: “torch::jit::Pickler::stack_”: class“std::vector<char,std::allocator<char>>”需要有 dll 接口由 class“torch::jit::Pickler”的客户端使用
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\torch\csrc\jit\serialization\pickler.h(240): message : 参见“std::vector<char,std::allocator<char>>”的声明
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\torch\csrc\jit\serialization\pickler.h(252,45): warning C4251: “torch::jit::Pickler::memoized_ivalue_map_”: class“std::unordered_map<const void *,uint32_t,std::hash<const void *>,std::equal_to<const void *>,std::allocator<std::pair<const void *const ,uint32_t>>>”需要有 dll 接口由 class“torch::jit::Pickler”的客户端使用
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\torch\csrc\jit\serialization\pickler.h(252): message : 参见“std::unordered_map<const void *,uint32_t,std::hash<const void *>,std::equal_to<const void *>,std::allocator<std::pair<const void *const ,uint32_t>>>”的声明
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\torch\csrc\jit\serialization\pickler.h(258,23): warning C4251: “torch::jit::Pickler::memoized_ivalues_”: class“std::vector<c10::IValue,std::allocator<c10::IValue>>”需要有 dll 接口由 class“torch::jit::Pickler”的客户端使用
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\c10\core\TensorImpl.h(53): message : 参见“std::vector<c10::IValue,std::allocator<c10::IValue>>”的声明
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\torch\csrc\jit\serialization\pickler.h(260,63): warning C4251: “torch::jit::Pickler::type_renamer_”: class“std::function<c10::QualifiedName (const c10::ClassTypePtr &)>”需要有 dll 接口由 class“torch::jit::Pickler”的客户端使用
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\torch\csrc\jit\serialization\pickler.h(131): message : 参见“std::function<c10::QualifiedName (const c10::ClassTypePtr &)>”的声明
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\torch\csrc\jit\serialization\pickler.h(267,49): warning C4251: “torch::jit::Pickler::get_tensor_id_”: class“std::function<std::string (const torch::autograd::Variable &)>”需要有 dll 接口由 class“torch::jit::Pickler”的客户端使用
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\torch\csrc\jit\frontend\tracer.h(56): message : 参见“std::function<std::string (const torch::autograd::Variable &)>”的声明
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\torch\csrc\jit\serialization\pickler.h(271,27): warning C4251: “torch::jit::Pickler::tensor_data_”: class“std::vector<at::Tensor,std::allocator<at::Tensor>>”需要有 dll 接口由 class“torch::jit::Pickler”的客户端使用
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\ATen\Operators.h(387): message : 参见“std::vector<at::Tensor,std::allocator<at::Tensor>>”的声明
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\torch\csrc\jit\serialization\pickler.h(272,45): warning C4251: “torch::jit::Pickler::memoized_storage_map_”: class“std::unordered_map<const void *,uint32_t,std::hash<const void *>,std::equal_to<const void *>,std::allocator<std::pair<const void *const ,uint32_t>>>”需要有 dll 接口由 class“torch::jit::Pickler”的客户端使用
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\torch\csrc\jit\serialization\pickler.h(252): message : 参见“std::unordered_map<const void *,uint32_t,std::hash<const void *>,std::equal_to<const void *>,std::allocator<std::pair<const void *const ,uint32_t>>>”的声明
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\torch\csrc\jit\serialization\pickler.h(274,45): warning C4251: “torch::jit::Pickler::memoized_globals_map_”: class“std::unordered_map<std::string,uint32_t,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::pair<const std::string,uint32_t>>>”需要有 dll 接口由 class“torch::jit::Pickler”的客户端使用
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\torch\csrc\jit\serialization\pickler.h(274): message : 参见“std::unordered_map<std::string,uint32_t,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::pair<const std::string,uint32_t>>>”的声明
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\torch\csrc\jit\serialization\pickler.h(275,45): warning C4251: “torch::jit::Pickler::memoized_strings_map_”: class“std::unordered_map<std::string,uint32_t,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::pair<const std::string,uint32_t>>>”需要有 dll 接口由 class“torch::jit::Pickler”的客户端使用
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\torch\csrc\jit\serialization\pickler.h(274): message : 参见“std::unordered_map<std::string,uint32_t,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::pair<const std::string,uint32_t>>>”的声明
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\torch\csrc\jit\serialization\pickler.h(276,45): warning C4251: “torch::jit::Pickler::memoized_devices_map_”: class“std::unordered_map<std::string,uint32_t,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::pair<const std::string,uint32_t>>>”需要有 dll 接口由 class“torch::jit::Pickler”的客户端使用
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\torch\csrc\jit\serialization\pickler.h(274): message : 参见“std::unordered_map<std::string,uint32_t,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::pair<const std::string,uint32_t>>>”的声明
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\torch\csrc\jit\serialization\unpickler.h(126,40): warning C4251: “torch::jit::Unpickler::reader_”: class“std::function<size_t (char *,size_t)>”需要有 dll 接口由 class“torch::jit::Unpickler”的客户端使用
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\torch\csrc\jit\serialization\unpickler.h(35): message : 参见“std::function<size_t (char *,size_t)>”的声明
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\torch\csrc\jit\serialization\unpickler.h(132,23): warning C4251: “torch::jit::Unpickler::stack_”: class“std::vector<c10::IValue,std::allocator<c10::IValue>>”需要有 dll 接口由 class“torch::jit::Unpickler”的客户端使用
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\c10\core\TensorImpl.h(53): message : 参见“std::vector<c10::IValue,std::allocator<c10::IValue>>”的声明
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\torch\csrc\jit\serialization\unpickler.h(136,42): warning C4251: “torch::jit::Unpickler::globals_”: class“std::vector<std::function<void (void)>,std::allocator<std::function<void (void)>>>”需要有 dll 接口由 class“torch::jit::Unpickler”的客户端使用
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\torch\csrc\jit\serialization\unpickler.h(136): message : 参见“std::vector<std::function<void (void)>,std::allocator<std::function<void (void)>>>”的声明
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\torch\csrc\jit\serialization\unpickler.h(137,23): warning C4251: “torch::jit::Unpickler::memo_table_”: class“std::vector<c10::IValue,std::allocator<c10::IValue>>”需要有 dll 接口由 class“torch::jit::Unpickler”的客户端使用
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\c10\core\TensorImpl.h(53): message : 参见“std::vector<c10::IValue,std::allocator<c10::IValue>>”的声明
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\torch\csrc\jit\serialization\unpickler.h(138,23): warning C4251: “torch::jit::Unpickler::marks_”: class“std::vector<T,std::allocator<T>>”需要有 dll 接口由 class“torch::jit::Unpickler”的客户端使用
          with
          [
              T=size_t
          ]
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\c10\util\ArrayRef.h(249): message : 参见“std::vector<T,std::allocator<T>>”的声明
          with
          [
              T=size_t
          ]
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\torch\csrc\jit\serialization\unpickler.h(139,29): warning C4251: “torch::jit::Unpickler::tensor_table_”: class“c10::ArrayRef<at::Tensor>”需要有 dll 接口由 class“torch::jit::Unpickler”的客户端使用
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\ATen\Operators.h(102): message : 参见“c10::ArrayRef<at::Tensor>”的声明
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\torch\csrc\jit\serialization\unpickler.h(145,49): warning C4251: “torch::jit::Unpickler::type_cache_”: class“std::unordered_map<std::string,c10::TypePtr,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::pair<const std::string,c10::TypePtr>>>”需要有 dll 接口由 class“torch::jit::Unpickler”的客户端使用
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\ATen\core\jit_type.h(1864): message : 参见“std::unordered_map<std::string,c10::TypePtr,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::pair<const std::string,c10::TypePtr>>>”的声明
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\torch\csrc\jit\serialization\unpickler.h(148,16): warning C4251: “torch::jit::Unpickler::type_resolver_”: class“std::function<c10::StrongTypePtr (const c10::QualifiedName &)>”需要有 dll 接口由 class“torch::jit::Unpickler”的客户端使用
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\torch\csrc\jit\serialization\unpickler.h(13): message : 参见“std::function<c10::StrongTypePtr (const c10::QualifiedName &)>”的声明
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\torch\csrc\jit\serialization\unpickler.h(149,13): warning C4251: “torch::jit::Unpickler::obj_loader_”: class“std::function<c10::intrusive_ptr<c10::ivalue::Object,c10::detail::intrusive_target_default_null_type<TTarget>> (c10::StrongTypePtr,c10::IValue)>”需要有 dll 接口由 class“torch::jit::Unpickler”的客户端使用
          with
          [
              TTarget=c10::ivalue::Object
          ]
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\torch\csrc\jit\serialization\unpickler.h(15): message : 参见“std::function<c10::intrusive_ptr<c10::ivalue::Object,c10::detail::intrusive_target_default_null_type<TTarget>> (c10::StrongTypePtr,c10::IValue)>”的声明
          with
          [
              TTarget=c10::ivalue::Object
          ]
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\torch\csrc\jit\serialization\unpickler.h(152,50): warning C4251: “torch::jit::Unpickler::read_record_”: class“std::function<c10::DataPtr (const std::string &)>”需要有 dll 接口由 class“torch::jit::Unpickler”的客户端使用
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\torch\csrc\jit\serialization\unpickler.h(51): message : 参见“std::function<c10::DataPtr (const std::string &)>”的声明
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\torch\csrc\jit\serialization\unpickler.h(153,29): warning C4251: “torch::jit::Unpickler::device_”: class“c10::optional<c10::Device>”需要有 dll 接口由 class“torch::jit::Unpickler”的客户端使用
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\c10\core\TensorOptions.h(25): message : 参见“c10::optional<c10::Device>”的声明
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\torch\csrc\jit\serialization\unpickler.h(161,50): warning C4251: “torch::jit::Unpickler::storage_context_”: class“std::shared_ptr<torch::jit::DeserializationStorageContext>”需要有 dll 接口由 class“torch::jit::Unpickler”的客户端使用
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\torch\csrc\jit\serialization\unpickler.h(54): message : 参见“std::shared_ptr<torch::jit::DeserializationStorageContext>”的声明
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\torch\csrc\autograd\anomaly_mode.h(59,15): warning C4251: “torch::autograd::AnomalyMetadata::traceback_”: class“std::basic_string<char,std::char_traits<char>,std::allocator<char>>”需要有 dll 接口由 struct“torch::autograd::AnomalyMetadata”的客户端使用
C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.29.30133\include\xstring(4871): message : 参见“std::basic_string<char,std::char_traits<char>,std::allocator<char>>”的声明
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\torch\csrc\autograd\anomaly_mode.h(60,25): warning C4251: “torch::autograd::AnomalyMetadata::parent_”: class“std::shared_ptr<torch::autograd::Node>”需要有 dll 接口由 struct“torch::autograd::AnomalyMetadata”的客户端使用
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\ATen\core\TensorBase.h(663): message : 参见“std::shared_ptr<torch::autograd::Node>”的声明
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\torch\csrc\autograd\profiler_legacy.h(337,37): warning C4251: “torch::autograd::profiler::LegacyEvent::shapes_”: class“std::vector<std::vector<int64_t,std::allocator<int64_t>>,std::allocator<std::vector<int64_t,std::allocator<int64_t>>>>”需要有 dll 接口由 struct“torch::autograd::profiler::LegacyEvent”的客户端使用
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\ATen\WrapDimUtils.h(28): message : 参见“std::vector<std::vector<int64_t,std::allocator<int64_t>>,std::allocator<std::vector<int64_t,std::allocator<int64_t>>>>”的声明
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\torch\csrc\autograd\profiler_legacy.h(341,17): warning C4251: “torch::autograd::profiler::LegacyEvent::cuda_event”: class“std::shared_ptr<CUevent_st>”需要有 dll 接口由 struct“torch::autograd::profiler::LegacyEvent”的客户端使用
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\torch\csrc\autograd\profiler_legacy.h(27): message : 参见“std::shared_ptr<CUevent_st>”的声明
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\torch\csrc\autograd\profiler_legacy.h(348,28): warning C4251: “torch::autograd::profiler::LegacyEvent::stack_”: class“std::vector<std::string,std::allocator<std::string>>”需要有 dll 接口由 struct“torch::autograd::profiler::LegacyEvent”的客户端使用
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\c10\util\Exception.h(35): message : 参见“std::vector<std::string,std::allocator<std::string>>”的声明
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\torch\csrc\autograd\profiler_legacy.h(352,48): warning C4251: “torch::autograd::profiler::LegacyEvent::extra_args_”: class“std::unordered_map<std::string,c10::IValue,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::pair<const std::string,c10::IValue>>>”需要有 dll 接口由 struct“torch::autograd::profiler::LegacyEvent”的客户端使用
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\ATen\core\function_schema.h(325): message : 参见“std::unordered_map<std::string,c10::IValue,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::pair<const std::string,c10::IValue>>>”的声明
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\torch\csrc\autograd\profiler_legacy.h(155,17): warning C4244: “初始化”: 从“double”转换到“int64_t”，可能丢失数据
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\torch\csrc\autograd\profiler_legacy.h(205,22): warning C4244: “=”: 从“double”转换到“int64_t”，可能丢失数据
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\torch\csrc\autograd\profiler_legacy.h(484,34): warning C4251: “torch::autograd::profiler::RecordProfile::file_”: class“std::unique_ptr<std::ofstream,std::default_delete<std::ofstream>>”需要有 dll 接口由 struct“torch::autograd::profiler::RecordProfile”的客户端使用
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\torch\csrc\autograd\profiler_legacy.h(484): message : 参见“std::unique_ptr<std::ofstream,std::default_delete<std::ofstream>>”的声明
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\c10\util\Optional.h(184,1): warning C4624: “c10::constexpr_storage_t<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=std::function<void (const torch::autograd::profiler::thread_event_lists &)>
          ]
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\c10\util\Optional.h(383): message : 查看对正在编译的 类 模板 实例化“c10::constexpr_storage_t<T>”的引用
          with
          [
              T=std::function<void (const torch::autograd::profiler::thread_event_lists &)>
          ]
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\c10\util\Optional.h(526): message : 查看对正在编译的 类 模板 实例化“c10::trivially_copyable_optimization_optional_base<T>”的引用
          with
          [
              T=std::function<void (const torch::autograd::profiler::thread_event_lists &)>
          ]
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\c10\util\Optional.h(526): message : 查看对正在编译的 别名 模板 实例化“c10::OptionalBase<std::function<void (const torch::autograd::profiler::thread_event_lists &)>>”的引用
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\torch\csrc\autograd\profiler_legacy.h(523): message : 查看对正在编译的 类 模板 实例化“c10::optional<std::function<void (const torch::autograd::profiler::thread_event_lists &)>>”的引用
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\c10\util\Optional.h(418,1): warning C4624: “c10::trivially_copyable_optimization_optional_base<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=std::function<void (const torch::autograd::profiler::thread_event_lists &)>
          ]
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\torch\csrc\autograd\profiler_legacy.h(523,65): warning C4251: “torch::autograd::profiler::TLSLegacyProfilerGuard::cb_”: class“c10::optional<std::function<void (const torch::autograd::profiler::thread_event_lists &)>>”需要有 dll 接口由 struct“torch::autograd::profiler::TLSLegacyProfilerGuard”的客户端使用
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\torch\csrc\autograd\profiler_legacy.h(501): message : 参见“c10::optional<std::function<void (const torch::autograd::profiler::thread_event_lists &)>>”的声明
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\torch\csrc\autograd\profiler_legacy.h(524,47): warning C4251: “torch::autograd::profiler::TLSLegacyProfilerGuard::profilerDisableOptions_”: class“c10::optional<torch::autograd::profiler::ProfilerDisableOptions>”需要有 dll 接口由 struct“torch::autograd::profiler::TLSLegacyProfilerGuard”的客户端使用
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\torch\csrc\autograd\profiler_legacy.h(459): message : 参见“c10::optional<torch::autograd::profiler::ProfilerDisableOptions>”的声明
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\torch\csrc\autograd\profiler_legacy.h(528,15): warning C4251: “torch::autograd::profiler::FileLineFunc::filename”: class“std::basic_string<char,std::char_traits<char>,std::allocator<char>>”需要有 dll 接口由 struct“torch::autograd::profiler::FileLineFunc”的客户端使用
C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.29.30133\include\xstring(4871): message : 参见“std::basic_string<char,std::char_traits<char>,std::allocator<char>>”的声明
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\torch\csrc\autograd\profiler_legacy.h(530,15): warning C4251: “torch::autograd::profiler::FileLineFunc::funcname”: class“std::basic_string<char,std::char_traits<char>,std::allocator<char>>”需要有 dll 接口由 struct“torch::autograd::profiler::FileLineFunc”的客户端使用
C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.29.30133\include\xstring(4871): message : 参见“std::basic_string<char,std::char_traits<char>,std::allocator<char>>”的声明
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\torch\csrc\autograd\profiler_legacy.h(583,14): warning C4251: “torch::autograd::profiler::ProfilerThreadLocalState::state_mutex_”: class“std::mutex”需要有 dll 接口由 struct“torch::autograd::profiler::ProfilerThreadLocalState”的客户端使用
C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.29.30133\include\mutex(86): message : 参见“std::mutex”的声明
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\torch\csrc\autograd\profiler_legacy.h(586,7): warning C4251: “torch::autograd::profiler::ProfilerThreadLocalState::event_lists_map_”: class“std::unordered_map<uint64_t,std::shared_ptr<torch::autograd::profiler::RangeEventList>,std::hash<uint64_t>,std::equal_to<uint64_t>,std::allocator<std::pair<const uint64_t,std::shared_ptr<torch::autograd::profiler::RangeEventList>>>>”需要有 dll 接口由 struct“torch::autograd::profiler::ProfilerThreadLocalState”的客户端使用
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\torch\csrc\autograd\profiler_legacy.h(584): message : 参见“std::unordered_map<uint64_t,std::shared_ptr<torch::autograd::profiler::RangeEventList>,std::hash<uint64_t>,std::equal_to<uint64_t>,std::allocator<std::pair<const uint64_t,std::shared_ptr<torch::autograd::profiler::RangeEventList>>>>”的声明
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\c10\util\Optional.h(184,1): warning C4624: “c10::constexpr_storage_t<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=std::vector<std::vector<torch::autograd::profiler::LegacyEvent,std::allocator<torch::autograd::profiler::LegacyEvent>>,std::allocator<std::vector<torch::autograd::profiler::LegacyEvent,std::allocator<torch::autograd::profiler::LegacyEvent>>>>
          ]
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\c10\util\Optional.h(383): message : 查看对正在编译的 类 模板 实例化“c10::constexpr_storage_t<T>”的引用
          with
          [
              T=std::vector<std::vector<torch::autograd::profiler::LegacyEvent,std::allocator<torch::autograd::profiler::LegacyEvent>>,std::allocator<std::vector<torch::autograd::profiler::LegacyEvent,std::allocator<torch::autograd::profiler::LegacyEvent>>>>
          ]
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\c10\util\Optional.h(526): message : 查看对正在编译的 类 模板 实例化“c10::trivially_copyable_optimization_optional_base<T>”的引用
          with
          [
              T=std::vector<std::vector<torch::autograd::profiler::LegacyEvent,std::allocator<torch::autograd::profiler::LegacyEvent>>,std::allocator<std::vector<torch::autograd::profiler::LegacyEvent,std::allocator<torch::autograd::profiler::LegacyEvent>>>>
          ]
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\c10\util\Optional.h(526): message : 查看对正在编译的 别名 模板 实例化“c10::OptionalBase<std::vector<std::vector<torch::autograd::profiler::LegacyEvent,std::allocator<torch::autograd::profiler::LegacyEvent>>,std::allocator<std::vector<torch::autograd::profiler::LegacyEvent,std::allocator<torch::autograd::profiler::LegacyEvent>>>>>”的引用
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\torch\csrc\autograd\profiler_legacy.h(593): message : 查看对正在编译的 类 模板 实例化“c10::optional<std::vector<std::vector<torch::autograd::profiler::LegacyEvent,std::allocator<torch::autograd::profiler::LegacyEvent>>,std::allocator<std::vector<torch::autograd::profiler::LegacyEvent,std::allocator<torch::autograd::profiler::LegacyEvent>>>>>”的引用
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\c10\util\Optional.h(418,1): warning C4624: “c10::trivially_copyable_optimization_optional_base<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=std::vector<std::vector<torch::autograd::profiler::LegacyEvent,std::allocator<torch::autograd::profiler::LegacyEvent>>,std::allocator<std::vector<torch::autograd::profiler::LegacyEvent,std::allocator<torch::autograd::profiler::LegacyEvent>>>>
          ]
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\torch\csrc\autograd\profiler_legacy.h(593,56): warning C4251: “torch::autograd::profiler::ProfilerThreadLocalState::remoteProfiledEvents_”: class“c10::optional<std::vector<std::vector<torch::autograd::profiler::LegacyEvent,std::allocator<torch::autograd::profiler::LegacyEvent>>,std::allocator<std::vector<torch::autograd::profiler::LegacyEvent,std::allocator<torch::autograd::profiler::LegacyEvent>>>>>”需要有 dll 接口由 struct“torch::autograd::profiler::ProfilerThreadLocalState”的客户端使用
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\torch\csrc\autograd\profiler_legacy.h(593): message : 参见“c10::optional<std::vector<std::vector<torch::autograd::profiler::LegacyEvent,std::allocator<torch::autograd::profiler::LegacyEvent>>,std::allocator<std::vector<torch::autograd::profiler::LegacyEvent,std::allocator<torch::autograd::profiler::LegacyEvent>>>>>”的声明
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\c10\util\Optional.h(184,1): warning C4624: “c10::constexpr_storage_t<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=std::vector<std::vector<int64_t,std::allocator<int64_t>>,std::allocator<std::vector<int64_t,std::allocator<int64_t>>>>
          ]
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\c10\util\Optional.h(383): message : 查看对正在编译的 类 模板 实例化“c10::constexpr_storage_t<T>”的引用
          with
          [
              T=std::vector<std::vector<int64_t,std::allocator<int64_t>>,std::allocator<std::vector<int64_t,std::allocator<int64_t>>>>
          ]
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\c10\util\Optional.h(526): message : 查看对正在编译的 类 模板 实例化“c10::trivially_copyable_optimization_optional_base<T>”的引用
          with
          [
              T=std::vector<std::vector<int64_t,std::allocator<int64_t>>,std::allocator<std::vector<int64_t,std::allocator<int64_t>>>>
          ]
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\c10\util\Optional.h(526): message : 查看对正在编译的 别名 模板 实例化“c10::OptionalBase<std::vector<std::vector<int64_t,std::allocator<int64_t>>,std::allocator<std::vector<int64_t,std::allocator<int64_t>>>>>”的引用
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\torch\csrc\autograd\profiler_kineto.h(40): message : 查看对正在编译的 类 模板 实例化“c10::optional<std::vector<std::vector<int64_t,std::allocator<int64_t>>,std::allocator<std::vector<int64_t,std::allocator<int64_t>>>>>”的引用
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\c10\util\Optional.h(418,1): warning C4624: “c10::trivially_copyable_optimization_optional_base<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=std::vector<std::vector<int64_t,std::allocator<int64_t>>,std::allocator<std::vector<int64_t,std::allocator<int64_t>>>>
          ]
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\c10\util\Optional.h(184,1): warning C4624: “c10::constexpr_storage_t<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=std::unordered_map<std::string,c10::IValue,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::pair<const std::string,c10::IValue>>>
          ]
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\c10\util\Optional.h(383): message : 查看对正在编译的 类 模板 实例化“c10::constexpr_storage_t<T>”的引用
          with
          [
              T=std::unordered_map<std::string,c10::IValue,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::pair<const std::string,c10::IValue>>>
          ]
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\c10\util\Optional.h(526): message : 查看对正在编译的 类 模板 实例化“c10::trivially_copyable_optimization_optional_base<T>”的引用
          with
          [
              T=std::unordered_map<std::string,c10::IValue,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::pair<const std::string,c10::IValue>>>
          ]
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\c10\util\Optional.h(526): message : 查看对正在编译的 别名 模板 实例化“c10::OptionalBase<std::unordered_map<std::string,c10::IValue,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::pair<const std::string,c10::IValue>>>>”的引用
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\torch\csrc\autograd\profiler_kineto.h(48): message : 查看对正在编译的 类 模板 实例化“c10::optional<std::unordered_map<std::string,c10::IValue,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::pair<const std::string,c10::IValue>>>>”的引用
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\c10\util\Optional.h(418,1): warning C4624: “c10::trivially_copyable_optimization_optional_base<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=std::unordered_map<std::string,c10::IValue,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::pair<const std::string,c10::IValue>>>
          ]
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\torch\csrc\autograd\profiler_kineto.h(278,52): warning C4251: “torch::autograd::profiler::KinetoEvent::shapes_”: class“c10::optional<std::vector<std::vector<int64_t,std::allocator<int64_t>>,std::allocator<std::vector<int64_t,std::allocator<int64_t>>>>>”需要有 dll 接口由 struct“torch::autograd::profiler::KinetoEvent”的客户端使用
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\torch\csrc\autograd\profiler_kineto.h(40): message : 参见“c10::optional<std::vector<std::vector<int64_t,std::allocator<int64_t>>,std::allocator<std::vector<int64_t,std::allocator<int64_t>>>>>”的声明
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\torch\csrc\autograd\profiler_kineto.h(279,43): warning C4251: “torch::autograd::profiler::KinetoEvent::stack_”: class“c10::optional<std::vector<std::string,std::allocator<std::string>>>”需要有 dll 接口由 struct“torch::autograd::profiler::KinetoEvent”的客户端使用
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\ATen\core\jit_type.h(31): message : 参见“c10::optional<std::vector<std::string,std::allocator<std::string>>>”的声明
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\torch\csrc\autograd\profiler_kineto.h(280,43): warning C4251: “torch::autograd::profiler::KinetoEvent::module_hierarchy_”: class“c10::optional<std::vector<std::string,std::allocator<std::string>>>”需要有 dll 接口由 struct“torch::autograd::profiler::KinetoEvent”的客户端使用
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\ATen\core\jit_type.h(31): message : 参见“c10::optional<std::vector<std::string,std::allocator<std::string>>>”的声明
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\torch\csrc\autograd\profiler_kineto.h(281,43): warning C4251: “torch::autograd::profiler::KinetoEvent::dtypes_”: class“c10::optional<std::vector<std::string,std::allocator<std::string>>>”需要有 dll 接口由 struct“torch::autograd::profiler::KinetoEvent”的客户端使用
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\ATen\core\jit_type.h(31): message : 参见“c10::optional<std::vector<std::string,std::allocator<std::string>>>”的声明
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\torch\csrc\autograd\profiler_kineto.h(284,15): warning C4251: “torch::autograd::profiler::KinetoEvent::name_”: class“std::basic_string<char,std::char_traits<char>,std::allocator<char>>”需要有 dll 接口由 struct“torch::autograd::profiler::KinetoEvent”的客户端使用
C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.29.30133\include\xstring(4871): message : 参见“std::basic_string<char,std::char_traits<char>,std::allocator<char>>”的声明
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\torch\csrc\autograd\profiler_kineto.h(296,17): warning C4251: “torch::autograd::profiler::KinetoEvent::cuda_event_start_”: class“std::shared_ptr<CUevent_st>”需要有 dll 接口由 struct“torch::autograd::profiler::KinetoEvent”的客户端使用
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\torch\csrc\autograd\profiler_legacy.h(27): message : 参见“std::shared_ptr<CUevent_st>”的声明
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\torch\csrc\autograd\profiler_kineto.h(297,17): warning C4251: “torch::autograd::profiler::KinetoEvent::cuda_event_end_”: class“std::shared_ptr<CUevent_st>”需要有 dll 接口由 struct“torch::autograd::profiler::KinetoEvent”的客户端使用
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\torch\csrc\autograd\profiler_legacy.h(27): message : 参见“std::shared_ptr<CUevent_st>”的声明
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\torch\csrc\autograd\profiler_kineto.h(329,28): warning C4251: “torch::autograd::profiler::ProfilerResult::events_”: class“std::vector<torch::autograd::profiler::KinetoEvent,std::allocator<torch::autograd::profiler::KinetoEvent>>”需要有 dll 接口由 struct“torch::autograd::profiler::ProfilerResult”的客户端使用
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\torch\csrc\autograd\profiler_kineto.h(311): message : 参见“std::vector<torch::autograd::profiler::KinetoEvent,std::allocator<torch::autograd::profiler::KinetoEvent>>”的声明
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\torch\csrc\autograd\saved_variable.h(70,32): warning C4251: “torch::autograd::SavedVariable::fw_grad_”: class“std::shared_ptr<torch::autograd::ForwardGrad>”需要有 dll 接口由 class“torch::autograd::SavedVariable”的客户端使用
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\torch\csrc\autograd\forward_grad.h(95): message : 参见“std::shared_ptr<torch::autograd::ForwardGrad>”的声明
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\torch\csrc\autograd\saved_variable.h(78,23): warning C4251: “torch::autograd::SavedVariable::weak_grad_fn_”: class“std::weak_ptr<torch::autograd::Node>”需要有 dll 接口由 class“torch::autograd::SavedVariable”的客户端使用
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\torch\csrc\autograd\variable.h(122): message : 参见“std::weak_ptr<torch::autograd::Node>”的声明
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\torch\csrc\autograd\saved_variable.h(92,39): warning C4251: “torch::autograd::SavedVariable::hooks_”: class“std::unique_ptr<torch::autograd::SavedVariableHooks,std::default_delete<torch::autograd::SavedVariableHooks>>”需要有 dll 接口由 class“torch::autograd::SavedVariable”的客户端使用
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\torch\csrc\autograd\saved_variable.h(40): message : 参见“std::unique_ptr<torch::autograd::SavedVariableHooks,std::default_delete<torch::autograd::SavedVariableHooks>>”的声明
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\torch\csrc\autograd\saved_variable.h(95,25): warning C4251: “torch::autograd::SavedVariable::grad_fn_”: class“std::shared_ptr<torch::autograd::Node>”需要有 dll 接口由 class“torch::autograd::SavedVariable”的客户端使用
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\ATen\core\TensorBase.h(663): message : 参见“std::shared_ptr<torch::autograd::Node>”的声明
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\torch\csrc\autograd\saved_variable.h(96,23): warning C4251: “torch::autograd::SavedVariable::grad_accumulator_”: class“std::weak_ptr<torch::autograd::Node>”需要有 dll 接口由 class“torch::autograd::SavedVariable”的客户端使用
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\torch\csrc\autograd\variable.h(122): message : 参见“std::weak_ptr<torch::autograd::Node>”的声明
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\torch\csrc\autograd\function.h(99,60): warning C4251: “std::enable_shared_from_this<torch::autograd::Node>::_Wptr”: class“std::weak_ptr<torch::autograd::Node>”需要有 dll 接口由 class“std::enable_shared_from_this<torch::autograd::Node>”的客户端使用
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\torch\csrc\autograd\variable.h(122): message : 参见“std::weak_ptr<torch::autograd::Node>”的声明
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\torch\csrc\autograd\function.h(524,14): warning C4251: “torch::autograd::Node::mutex_”: class“std::mutex”需要有 dll 接口由 struct“torch::autograd::Node”的客户端使用
C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.29.30133\include\mutex(86): message : 参见“std::mutex”的声明
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\torch\csrc\autograd\function.h(527,13): warning C4251: “torch::autograd::Node::next_edges_”: class“std::vector<torch::autograd::Edge,std::allocator<torch::autograd::Edge>>”需要有 dll 接口由 struct“torch::autograd::Node”的客户端使用
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\torch\csrc\autograd\function.h(33): message : 参见“std::vector<torch::autograd::Edge,std::allocator<torch::autograd::Edge>>”的声明
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\torch\csrc\autograd\function.h(531,36): warning C4251: “torch::autograd::Node::anomaly_metadata_”: class“std::unique_ptr<torch::autograd::AnomalyMetadata,std::default_delete<torch::autograd::AnomalyMetadata>>”需要有 dll 接口由 struct“torch::autograd::Node”的客户端使用
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\torch\csrc\autograd\function.h(531): message : 参见“std::unique_ptr<torch::autograd::AnomalyMetadata,std::default_delete<torch::autograd::AnomalyMetadata>>”的声明
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\torch\csrc\autograd\function.h(533,49): warning C4251: “torch::autograd::Node::pre_hooks_”: class“std::vector<std::unique_ptr<torch::autograd::FunctionPreHook,std::default_delete<torch::autograd::FunctionPreHook>>,std::allocator<std::unique_ptr<torch::autograd::FunctionPreHook,std::default_delete<torch::autograd::FunctionPreHook>>>>”需要有 dll 接口由 struct“torch::autograd::Node”的客户端使用
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\torch\csrc\autograd\function.h(421): message : 参见“std::vector<std::unique_ptr<torch::autograd::FunctionPreHook,std::default_delete<torch::autograd::FunctionPreHook>>,std::allocator<std::unique_ptr<torch::autograd::FunctionPreHook,std::default_delete<torch::autograd::FunctionPreHook>>>>”的声明
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\torch\csrc\autograd\function.h(535,50): warning C4251: “torch::autograd::Node::post_hooks_”: class“std::vector<std::unique_ptr<torch::autograd::FunctionPostHook,std::default_delete<torch::autograd::FunctionPostHook>>,std::allocator<std::unique_ptr<torch::autograd::FunctionPostHook,std::default_delete<torch::autograd::FunctionPostHook>>>>”需要有 dll 接口由 struct“torch::autograd::Node”的客户端使用
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\torch\csrc\autograd\function.h(397): message : 参见“std::vector<std::unique_ptr<torch::autograd::FunctionPostHook,std::default_delete<torch::autograd::FunctionPostHook>>,std::allocator<std::unique_ptr<torch::autograd::FunctionPostHook,std::default_delete<torch::autograd::FunctionPostHook>>>>”的声明
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\torch\csrc\autograd\function.h(537,37): warning C4251: “torch::autograd::Node::input_metadata_”: class“c10::SmallVector<torch::autograd::InputMetadata,2>”需要有 dll 接口由 struct“torch::autograd::Node”的客户端使用
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\torch\csrc\autograd\function.h(537): message : 参见“c10::SmallVector<torch::autograd::InputMetadata,2>”的声明
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\torch\csrc\autograd\function.h(188,1): warning C4267: “初始化”: 从“size_t”转换到“uint32_t”，可能丢失数据
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\torch\csrc\autograd\function.h(195,1): warning C4267: “初始化”: 从“size_t”转换到“uint32_t”，可能丢失数据
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\torch\csrc\autograd\function.h(203,1): warning C4267: “初始化”: 从“size_t”转换到“uint32_t”，可能丢失数据
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\torch\csrc\autograd\function.h(209,1): warning C4267: “return”: 从“size_t”转换到“uint32_t”，可能丢失数据
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\torch\csrc\autograd\function.h(283,1): warning C4267: “return”: 从“size_t”转换到“uint32_t”，可能丢失数据
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\torch\csrc\autograd\custom_function.h(105,47): warning C4251: “torch::autograd::AutogradContext::saved_data”: class“ska::flat_hash_map<std::string,c10::IValue,std::hash<std::string>,std::equal_to<std::string>,std::allocator<c10::EnumNameValue>>”需要有 dll 接口由 struct“torch::autograd::AutogradContext”的客户端使用
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\torch\csrc\autograd\custom_function.h(105): message : 参见“ska::flat_hash_map<std::string,c10::IValue,std::hash<std::string>,std::equal_to<std::string>,std::allocator<c10::EnumNameValue>>”的声明
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\torch\csrc\autograd\custom_function.h(129,39): warning C4251: “torch::autograd::AutogradContext::non_differentiable_”: class“std::unordered_set<c10::TensorImpl *,std::hash<c10::TensorImpl *>,std::equal_to<c10::TensorImpl *>,std::allocator<c10::TensorImpl *>>”需要有 dll 接口由 struct“torch::autograd::AutogradContext”的客户端使用
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\torch\csrc\autograd\custom_function.h(17): message : 参见“std::unordered_set<c10::TensorImpl *,std::hash<c10::TensorImpl *>,std::equal_to<c10::TensorImpl *>,std::allocator<c10::TensorImpl *>>”的声明
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\torch\csrc\autograd\custom_function.h(130,39): warning C4251: “torch::autograd::AutogradContext::dirty_inputs_”: class“std::unordered_set<c10::TensorImpl *,std::hash<c10::TensorImpl *>,std::equal_to<c10::TensorImpl *>,std::allocator<c10::TensorImpl *>>”需要有 dll 接口由 struct“torch::autograd::AutogradContext”的客户端使用
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\torch\csrc\autograd\custom_function.h(17): message : 参见“std::unordered_set<c10::TensorImpl *,std::hash<c10::TensorImpl *>,std::equal_to<c10::TensorImpl *>,std::allocator<c10::TensorImpl *>>”的声明
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\torch\csrc\autograd\custom_function.h(131,47): warning C4251: “torch::autograd::AutogradContext::saved_variables_”: class“std::vector<torch::autograd::SavedVariable,std::allocator<torch::autograd::SavedVariable>>”需要有 dll 接口由 struct“torch::autograd::AutogradContext”的客户端使用
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\torch\csrc\autograd\function.h(34): message : 参见“std::vector<torch::autograd::SavedVariable,std::allocator<torch::autograd::SavedVariable>>”的声明
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\torch\csrc\autograd\custom_function.h(132,17): warning C4251: “torch::autograd::AutogradContext::to_save_”: class“std::vector<at::Tensor,std::allocator<at::Tensor>>”需要有 dll 接口由 struct“torch::autograd::AutogradContext”的客户端使用
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\ATen\Operators.h(387): message : 参见“std::vector<at::Tensor,std::allocator<at::Tensor>>”的声明
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\torch\csrc\autograd\custom_function.h(138,23): warning C4251: “torch::autograd::AutogradContext::grad_fn_”: class“std::weak_ptr<torch::autograd::Node>”需要有 dll 接口由 struct“torch::autograd::AutogradContext”的客户端使用
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\torch\csrc\autograd\variable.h(122): message : 参见“std::weak_ptr<torch::autograd::Node>”的声明
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\torch\csrc\autograd\custom_function.h(155,24): warning C4251: “torch::autograd::VariableInfo::size”: class“std::vector<int64_t,std::allocator<int64_t>>”需要有 dll 接口由 struct“torch::autograd::VariableInfo”的客户端使用
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\c10\core\MemoryFormat.h(63): message : 参见“std::vector<int64_t,std::allocator<int64_t>>”的声明
E:\SANY\Program\Pytorch\PointNet\C++Deployment\loadModel\loadModel\loadModel.cpp(15,27): warning C4267: “初始化”: 从“size_t”转换到“int”，可能丢失数据
E:\SANY\Program\Pytorch\PointNet\C++Deployment\loadModel\loadModel\loadModel.cpp(38,12): warning C4244: “=”: 从“double”转换到“float”，可能丢失数据
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\c10\util\Optional.h(624,1): warning C4267: “参数”: 从“size_t”转换到“T”，可能丢失数据
          with
          [
              T=int32_t
          ]
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\ATen\core\function_schema.h(279): message : 查看对正在编译的函数 模板 实例化“c10::optional<int32_t>::optional<size_t,false>(U &&)”的引用
          with
          [
              U=size_t
          ]
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\ATen\core\function_schema.h(279): message : 查看对正在编译的函数 模板 实例化“c10::optional<int32_t>::optional<size_t,false>(U &&)”的引用
          with
          [
              U=size_t
          ]
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\c10\util\TypeCast.h(40,62): warning C4244: “参数”: 从“src_t”转换到“float”，可能丢失数据
          with
          [
              src_t=int64_t
          ]
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\c10\util\TypeCast.h(38): message : 在编译 类 模板 成员函数“dest_t c10::static_cast_with_inter_type<dest_t,From>::apply(src_t)”时
          with
          [
              dest_t=c10::BFloat16,
              From=int64_t,
              src_t=int64_t
          ]
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\c10\util\TypeCast.h(173): message : 查看对正在编译的函数 模板 实例化“dest_t c10::static_cast_with_inter_type<dest_t,From>::apply(src_t)”的引用
          with
          [
              dest_t=c10::BFloat16,
              From=int64_t,
              src_t=int64_t
          ]
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\c10\util\TypeCast.h(173): message : 查看对正在编译的 类 模板 实例化“c10::static_cast_with_inter_type<To,From>”的引用
          with
          [
              To=c10::BFloat16,
              From=int64_t
          ]
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\c10\util\TypeCast.h(186): message : 查看对正在编译的函数 模板 实例化“To c10::convert<To,From>(From)”的引用
          with
          [
              To=c10::BFloat16,
              From=int64_t
          ]
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\c10\core\Scalar.h(65): message : 查看对正在编译的函数 模板 实例化“To c10::checked_convert<c10::BFloat16,int64_t>(From,const char *)”的引用
          with
          [
              To=c10::BFloat16,
              From=int64_t
          ]
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\c10\util\TypeCast.h(40,62): warning C4244: “参数”: 从“T”转换到“float”，可能丢失数据
          with
          [
              T=double
          ]
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\c10\util\TypeCast.h(38): message : 在编译 类 模板 成员函数“dest_t c10::static_cast_with_inter_type<dest_t,From>::apply(src_t)”时
          with
          [
              dest_t=c10::BFloat16,
              From=c10::complex<double>,
              src_t=c10::complex<double>
          ]
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\c10\util\TypeCast.h(173): message : 查看对正在编译的函数 模板 实例化“dest_t c10::static_cast_with_inter_type<dest_t,From>::apply(src_t)”的引用
          with
          [
              dest_t=c10::BFloat16,
              From=c10::complex<double>,
              src_t=c10::complex<double>
          ]
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\c10\util\TypeCast.h(173): message : 查看对正在编译的 类 模板 实例化“c10::static_cast_with_inter_type<To,From>”的引用
          with
          [
              To=c10::BFloat16,
              From=c10::complex<double>
          ]
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\c10\util\TypeCast.h(186): message : 查看对正在编译的函数 模板 实例化“To c10::convert<To,From>(From)”的引用
          with
          [
              To=c10::BFloat16,
              From=c10::complex<double>
          ]
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\c10\core\Scalar.h(65): message : 查看对正在编译的函数 模板 实例化“To c10::checked_convert<c10::BFloat16,c10::complex<double>>(From,const char *)”的引用
          with
          [
              To=c10::BFloat16,
              From=c10::complex<double>
          ]
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\c10\util\TypeCast.h(40,62): warning C4244: “参数”: 从“src_t”转换到“float”，可能丢失数据
          with
          [
              src_t=double
          ]
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\c10\util\TypeCast.h(38): message : 在编译 类 模板 成员函数“dest_t c10::static_cast_with_inter_type<dest_t,From>::apply(src_t)”时
          with
          [
              dest_t=c10::BFloat16,
              From=double,
              src_t=double
          ]
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\c10\util\TypeCast.h(173): message : 查看对正在编译的函数 模板 实例化“dest_t c10::static_cast_with_inter_type<dest_t,From>::apply(src_t)”的引用
          with
          [
              dest_t=c10::BFloat16,
              From=double,
              src_t=double
          ]
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\c10\util\TypeCast.h(173): message : 查看对正在编译的 类 模板 实例化“c10::static_cast_with_inter_type<To,From>”的引用
          with
          [
              To=c10::BFloat16,
              From=double
          ]
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\c10\util\TypeCast.h(186): message : 查看对正在编译的函数 模板 实例化“To c10::convert<To,From>(From)”的引用
          with
          [
              To=c10::BFloat16,
              From=double
          ]
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\c10\core\Scalar.h(65): message : 查看对正在编译的函数 模板 实例化“To c10::checked_convert<c10::BFloat16,double>(From,const char *)”的引用
          with
          [
              To=c10::BFloat16,
              From=double
          ]
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\c10\util\TypeCast.h(40,62): warning C4244: “参数”: 从“src_t”转换到“const T”，可能丢失数据
          with
          [
              src_t=int64_t
          ]
          and
          [
              T=double
          ]
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\c10\util\TypeCast.h(38): message : 在编译 类 模板 成员函数“dest_t c10::static_cast_with_inter_type<dest_t,From>::apply(src_t)”时
          with
          [
              dest_t=c10::complex<double>,
              From=int64_t,
              src_t=int64_t
          ]
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\c10\util\TypeCast.h(173): message : 查看对正在编译的函数 模板 实例化“dest_t c10::static_cast_with_inter_type<dest_t,From>::apply(src_t)”的引用
          with
          [
              dest_t=c10::complex<double>,
              From=int64_t,
              src_t=int64_t
          ]
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\c10\util\TypeCast.h(173): message : 查看对正在编译的 类 模板 实例化“c10::static_cast_with_inter_type<To,From>”的引用
          with
          [
              To=c10::complex<double>,
              From=int64_t
          ]
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\c10\util\TypeCast.h(186): message : 查看对正在编译的函数 模板 实例化“To c10::convert<To,From>(From)”的引用
          with
          [
              To=c10::complex<double>,
              From=int64_t
          ]
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\c10\core\Scalar.h(65): message : 查看对正在编译的函数 模板 实例化“To c10::checked_convert<c10::complex<double>,int64_t>(From,const char *)”的引用
          with
          [
              To=c10::complex<double>,
              From=int64_t
          ]
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\c10\util\TypeCast.h(40,62): warning C4244: “参数”: 从“src_t”转换到“const T”，可能丢失数据
          with
          [
              src_t=int64_t
          ]
          and
          [
              T=float
          ]
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\c10\util\TypeCast.h(38): message : 在编译 类 模板 成员函数“dest_t c10::static_cast_with_inter_type<dest_t,From>::apply(src_t)”时
          with
          [
              dest_t=c10::complex<float>,
              From=int64_t,
              src_t=int64_t
          ]
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\c10\util\TypeCast.h(173): message : 查看对正在编译的函数 模板 实例化“dest_t c10::static_cast_with_inter_type<dest_t,From>::apply(src_t)”的引用
          with
          [
              dest_t=c10::complex<float>,
              From=int64_t,
              src_t=int64_t
          ]
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\c10\util\TypeCast.h(173): message : 查看对正在编译的 类 模板 实例化“c10::static_cast_with_inter_type<To,From>”的引用
          with
          [
              To=c10::complex<float>,
              From=int64_t
          ]
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\c10\util\TypeCast.h(186): message : 查看对正在编译的函数 模板 实例化“To c10::convert<To,From>(From)”的引用
          with
          [
              To=c10::complex<float>,
              From=int64_t
          ]
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\c10\core\Scalar.h(65): message : 查看对正在编译的函数 模板 实例化“To c10::checked_convert<c10::complex<float>,int64_t>(From,const char *)”的引用
          with
          [
              To=c10::complex<float>,
              From=int64_t
          ]
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\c10\util\TypeCast.h(40,62): warning C4244: “参数”: 从“src_t”转换到“const T”，可能丢失数据
          with
          [
              src_t=double
          ]
          and
          [
              T=float
          ]
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\c10\util\TypeCast.h(38): message : 在编译 类 模板 成员函数“dest_t c10::static_cast_with_inter_type<dest_t,From>::apply(src_t)”时
          with
          [
              dest_t=c10::complex<float>,
              From=double,
              src_t=double
          ]
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\c10\util\TypeCast.h(173): message : 查看对正在编译的函数 模板 实例化“dest_t c10::static_cast_with_inter_type<dest_t,From>::apply(src_t)”的引用
          with
          [
              dest_t=c10::complex<float>,
              From=double,
              src_t=double
          ]
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\c10\util\TypeCast.h(173): message : 查看对正在编译的 类 模板 实例化“c10::static_cast_with_inter_type<To,From>”的引用
          with
          [
              To=c10::complex<float>,
              From=double
          ]
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\c10\util\TypeCast.h(186): message : 查看对正在编译的函数 模板 实例化“To c10::convert<To,From>(From)”的引用
          with
          [
              To=c10::complex<float>,
              From=double
          ]
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\c10\core\Scalar.h(65): message : 查看对正在编译的函数 模板 实例化“To c10::checked_convert<c10::complex<float>,double>(From,const char *)”的引用
          with
          [
              To=c10::complex<float>,
              From=double
          ]
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\c10\util\complex.h(165,14): warning C4244: “初始化”: 从“const T”转换到“T”，可能丢失数据
          with
          [
              T=double
          ]
          and
          [
              T=float
          ]
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\c10\util\TypeCast.h(40): message : 查看对正在编译的函数 模板 实例化“c10::complex<float>::complex<T>(const c10::complex<double> &)”的引用
          with
          [
              T=float
          ]
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\c10\util\TypeCast.h(40): message : 查看对正在编译的函数 模板 实例化“c10::complex<float>::complex<T>(const c10::complex<double> &)”的引用
          with
          [
              T=float
          ]
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\c10\util\TypeCast.h(38): message : 在编译 类 模板 成员函数“dest_t c10::static_cast_with_inter_type<dest_t,From>::apply(src_t)”时
          with
          [
              dest_t=c10::complex<float>,
              From=c10::complex<double>,
              src_t=c10::complex<double>
          ]
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\c10\util\TypeCast.h(173): message : 查看对正在编译的函数 模板 实例化“dest_t c10::static_cast_with_inter_type<dest_t,From>::apply(src_t)”的引用
          with
          [
              dest_t=c10::complex<float>,
              From=c10::complex<double>,
              src_t=c10::complex<double>
          ]
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\c10\util\TypeCast.h(173): message : 查看对正在编译的 类 模板 实例化“c10::static_cast_with_inter_type<To,From>”的引用
          with
          [
              To=c10::complex<float>,
              From=c10::complex<double>
          ]
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\c10\util\TypeCast.h(186): message : 查看对正在编译的函数 模板 实例化“To c10::convert<To,From>(From)”的引用
          with
          [
              To=c10::complex<float>,
              From=c10::complex<double>
          ]
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\c10\core\Scalar.h(65): message : 查看对正在编译的函数 模板 实例化“To c10::checked_convert<c10::complex<float>,c10::complex<double>>(From,const char *)”的引用
          with
          [
              To=c10::complex<float>,
              From=c10::complex<double>
          ]
D:\Program Files\AlgorithmLibrary\libtorch\debug\include\c10\util\complex.h(165,34): warning C4244: “初始化”: 从“const T”转换到“T”，可能丢失数据
          with
          [
              T=double
          ]
          and
          [
              T=float
          ]
    正在创建库 E:\SANY\Program\Pytorch\PointNet\C++Deployment\loadModel\x64\Debug\loadModel.lib 和对象 E:\SANY\Program\Pytorch\PointNet\C++Deployment\loadModel\x64\Debug\loadModel.exp
  loadModel.vcxproj -> E:\SANY\Program\Pytorch\PointNet\C++Deployment\loadModel\x64\Debug\loadModel.exe
